
def heuristic(input_data):
    """Combines SPT, job priority, and machine load balancing for FJSSP."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    job_priorities = {}
    for job, ops in jobs.items():
        total_time = sum(min(times) for machines, times in ops)
        job_priorities[job] = total_time

    sorted_jobs = sorted(job_priorities.items(), key=lambda item: item[1], reverse=True)

    schedule = {}
    machine_available_times = {m: 0 for m in range(n_machines)}
    job_last_end_times = {j: 0 for j in range(1, n_jobs + 1)}
    operation_counter = {job: 0 for job in range(1, n_jobs + 1)}

    for job_id, _ in sorted_jobs:
        schedule[job_id] = []
        current_job_completion_time = job_last_end_times[job_id]
        
        for op_idx, operation_data in enumerate(jobs[job_id]):
            machines, times = operation_data
            
            operation_number = operation_counter[job_id] + 1
            operation_counter[job_id] = operation_number

            best_machine, best_start_time, best_processing_time = None, float('inf'), None
            min_machine_load = float('inf')

            for m_idx, machine in enumerate(machines):
                processing_time = times[m_idx]
                start_time = max(machine_available_times[machine], current_job_completion_time)
                machine_load = machine_available_times[machine]

                if start_time < best_start_time or (start_time == best_start_time and machine_load < min_machine_load):
                    best_machine, best_start_time, best_processing_time = machine, start_time, processing_time
                    min_machine_load = machine_load

            # Introduce a load balancing element
            current_machine_load = machine_available_times[best_machine]
            if len(machines) > 1 and current_machine_load > 0 and (op_idx % 3 != 0): 
                for m_idx, machine in enumerate(machines):
                    if machine == best_machine:
                        continue
                    processing_time = times[m_idx]
                    start_time = max(machine_available_times[machine], current_job_completion_time)
                    if start_time < (best_start_time * 1.1) and machine_available_times[machine] < current_machine_load:
                        best_machine = machine
                        best_start_time = start_time
                        best_processing_time = processing_time

            start_time = best_start_time
            end_time = start_time + best_processing_time

            schedule[job_id].append({
                'Operation': operation_number,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': best_processing_time
            })

            machine_available_times[best_machine] = end_time
            current_job_completion_time = end_time
            job_last_end_times[job_id] = end_time

    return schedule
