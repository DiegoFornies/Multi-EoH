
def heuristic(input_data):
    """Combines SPT, machine load balancing, and adaptive weights for FJSSP."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    schedule = {}
    machine_available_times = {m: 0 for m in range(n_machines)}
    job_last_end_times = {j: 0 for j in range(1, n_jobs + 1)}
    machine_load = {m: 0 for m in range(n_machines)}
    operation_counter = {job: 0 for job in range(1, n_jobs + 1)}
    ready_operations = []
    for job_id, operations in jobs.items():
        ready_operations.append((job_id, 0))

    while ready_operations:
        best_job, best_op_idx, best_machine, best_start_time, best_processing_time = None, None, None, float('inf'), None
        makespan_weight = 0.5
        balance_weight = 0.5

        for job_id, op_idx in ready_operations:
            machines, times = jobs[job_id][op_idx]
            for m_idx, machine in enumerate(machines):
                processing_time = times[m_idx]
                start_time = max(machine_available_times[machine], job_last_end_times[job_id])
                makespan_score = start_time + processing_time
                balance_score = machine_load[machine]
                combined_score = makespan_weight * makespan_score + balance_weight * balance_score

                if combined_score < float('inf'):
                    if best_job is None or combined_score < (makespan_weight * (best_start_time + best_processing_time) + balance_weight * machine_load[best_machine]):
                        best_job, best_op_idx, best_machine, best_start_time, best_processing_time = job_id, op_idx, machine, start_time, processing_time

        job_id = best_job
        op_idx = best_op_idx
        machine = best_machine
        start_time = best_start_time
        processing_time = best_processing_time
        end_time = start_time + processing_time

        if job_id not in schedule:
            schedule[job_id] = []

        operation_number = operation_counter[job_id] + 1
        operation_counter[job_id] = operation_number
        schedule[job_id].append({
            'Operation': operation_number,
            'Assigned Machine': machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': processing_time
        })

        machine_available_times[machine] = end_time
        job_last_end_times[job_id] = end_time
        machine_load[machine] += processing_time

        max_end_time = max(machine_available_times.values())
        if max_end_time > 0:
            makespan_weight = min(0.7, max_end_time / 100.0)
        balance_weight = 1 - makespan_weight

        ready_operations.remove((job_id, op_idx))
        if op_idx + 1 < len(jobs[job_id]):
            ready_operations.append((job_id, op_idx + 1))

    return schedule
