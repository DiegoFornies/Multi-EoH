
def heuristic(input_data):
    """Combines job prioritization and machine load balancing for FJSSP."""

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    # Calculate total processing time for each job
    job_priorities = {}
    for job, ops in jobs_data.items():
        total_time = sum(min(times) for machines, times in ops)
        job_priorities[job] = total_time

    # Sort jobs based on total processing time (longest first)
    sorted_jobs = sorted(job_priorities.items(), key=lambda item: item[1], reverse=True)

    schedule = {}
    machine_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {job: 0 for job in range(1, n_jobs + 1)}
    operation_counter = {job: 0 for job in range(1, n_jobs + 1)}

    for job, _ in sorted_jobs:
        schedule[job] = []

        for op_index, operation in enumerate(jobs_data[job]):
            machines, times = operation
            operation_number = operation_counter[job] + 1
            operation_counter[job] = operation_number

            best_machine = None
            min_end_time = float('inf')
            best_start_time = None
            best_processing_time = None

            for i, machine in enumerate(machines):
                processing_time = times[i]
                start_time = max(machine_time[machine], job_completion_time[job])
                end_time = start_time + processing_time

                # Load balancing factor, prefer less loaded machines
                load_factor = machine_time[machine] * 0.01
                adjusted_end_time = end_time + load_factor

                if adjusted_end_time < min_end_time:
                    min_end_time = adjusted_end_time
                    best_machine = machine
                    best_start_time = start_time
                    best_processing_time = processing_time

            if best_machine is None:
                best_machine = machines[0]
                best_processing_time = times[0]
                best_start_time = max(machine_time[best_machine], job_completion_time[job])

            schedule[job].append({
                'Operation': operation_number,
                'Assigned Machine': best_machine,
                'Start Time': best_start_time,
                'End Time': best_start_time + best_processing_time,
                'Processing Time': best_processing_time
            })

            machine_time[best_machine] = best_start_time + best_processing_time
            job_completion_time[job] = best_start_time + best_processing_time

    return schedule
