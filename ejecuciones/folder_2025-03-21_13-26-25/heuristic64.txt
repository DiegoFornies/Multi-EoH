
def heuristic(input_data):
    """Hybrid heuristic combining SPT, machine balancing, and job priorities."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    schedule = {}
    machine_available_times = {m: 0 for m in range(n_machines)}
    job_last_end_times = {j: 0 for j in range(1, n_jobs + 1)}
    machine_load = {m: 0 for m in range(n_machines)}

    job_priorities = {}
    for job, ops in jobs.items():
        total_time = sum(min(times) for machines, times in ops)
        job_priorities[job] = total_time

    sorted_jobs = sorted(job_priorities.items(), key=lambda item: item[1], reverse=True)

    operation_counter = {job: 0 for job in range(1, n_jobs + 1)}
    for job, _ in sorted_jobs:
        schedule[job] = []
        current_job_completion_time = 0

        for op_index, operation_data in enumerate(jobs[job]):
            machines, times = operation_data
            operation_number = operation_counter[job] + 1
            operation_counter[job] = operation_number
            best_machine = None
            earliest_start_time = float('inf')
            best_processing_time = None

            for machine_index, machine in enumerate(machines):
                processing_time = times[machine_index]
                start_time = max(machine_available_times[machine], current_job_completion_time)
                combined_score = start_time + processing_time + machine_load[machine] * 0.1  # Weighted score

                if combined_score < earliest_start_time:
                    earliest_start_time = combined_score
                    best_machine = machine
                    best_processing_time = processing_time

            if best_machine is None:
                best_machine = machines[0]
                best_processing_time = times[0]
                earliest_start_time = max(machine_available_times[best_machine], current_job_completion_time)

            start_time = max(machine_available_times[best_machine], current_job_completion_time)
            end_time = start_time + best_processing_time

            schedule[job].append({
                'Operation': operation_number,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': best_processing_time
            })

            machine_available_times[best_machine] = end_time
            machine_load[best_machine] += best_processing_time
            current_job_completion_time = end_time

    return schedule
