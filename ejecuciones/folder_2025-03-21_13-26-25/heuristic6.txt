
def heuristic(input_data):
    """
    A heuristic for the Flexible Job Shop Scheduling Problem (FJSSP) that considers machine load balancing
    and minimizes idle time between operations of the same job.

    Args:
        input_data (dict): A dictionary containing the problem instance data.

    Returns:
        dict: A dictionary representing the schedule.
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    schedule = {}
    machine_available_times = {m: 0 for m in range(n_machines)}
    job_finish_times = {j: 0 for j in jobs}

    # Prioritize jobs with more operations (Longest Processing Time (LPT) rule combined with
    # considering operation flexibility).
    job_priorities = {}
    for job, operations in jobs.items():
        total_processing_options = sum(len(op[0]) for op in operations)
        job_priorities[job] = total_processing_options

    sorted_jobs = sorted(jobs.keys(), key=lambda job: job_priorities[job], reverse=True)


    for job in sorted_jobs:
        schedule[job] = []
        current_time = 0

        for operation_index, operation in enumerate(jobs[job]):
            possible_machines = operation[0]
            possible_times = operation[1]

            best_machine = None
            min_end_time = float('inf')

            for machine_index, machine in enumerate(possible_machines):
                processing_time = possible_times[machine_index]
                available_time = machine_available_times[machine]
                start_time = max(available_time, current_time)
                end_time = start_time + processing_time

                if end_time < min_end_time:
                    min_end_time = end_time
                    best_machine = machine
                    best_start_time = start_time
                    best_processing_time = processing_time

            # Assign the operation to the best machine found
            schedule[job].append({
                'Operation': operation_index + 1,
                'Assigned Machine': best_machine,
                'Start Time': best_start_time,
                'End Time': min_end_time,
                'Processing Time': best_processing_time
            })

            # Update machine and job finish times
            machine_available_times[best_machine] = min_end_time
            current_time = min_end_time #Operations of the same job should not overlap.

    return schedule
