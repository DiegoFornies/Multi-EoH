
def heuristic(input_data):
    """Schedules jobs to minimize makespan and balance machine load."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    machine_available_time = {m: 0 for m in range(n_machines)}
    machine_load = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in range(1, n_jobs + 1)}
    schedule = {j: [] for j in range(1, n_jobs + 1)}
    operation_queue = []

    for job in range(1, n_jobs + 1):
        operation_queue.append((job, 0))

    while operation_queue:
        operation_queue.sort(key=lambda x: min(
            input_data['jobs'][x[0]][x[1]][1][i]
            for i in range(len(input_data['jobs'][x[0]][x[1]][0]))
        ))

        job, operation_index = operation_queue.pop(0)
        machines, times = jobs[job][operation_index]

        best_machine = None
        min_end_time = float('inf')
        processing_time = None

        for i, machine in enumerate(machines):
            start_time = max(machine_available_time[machine], job_completion_time[job])
            end_time = start_time + times[i]
            balancing_factor = machine_load[machine] * 0.01
            adjusted_end_time = end_time + balancing_factor

            if adjusted_end_time < min_end_time:
                min_end_time = adjusted_end_time
                best_machine = machine
                processing_time = times[i]

        start_time = max(machine_available_time[best_machine], job_completion_time[job])
        end_time = start_time + processing_time

        schedule[job].append({
            'Operation': operation_index + 1,
            'Assigned Machine': best_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': processing_time
        })

        machine_available_time[best_machine] = end_time
        machine_load[best_machine] += processing_time
        job_completion_time[job] = end_time

        if operation_index + 1 < len(jobs[job]):
            operation_queue.append((job, operation_index + 1))

    return schedule
