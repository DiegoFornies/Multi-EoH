
def heuristic(input_data):
    """
    A heuristic for solving the Flexible Job Shop Scheduling Problem (FJSSP).
    This heuristic considers machine load balancing and job completion time.

    Args:
        input_data (dict): A dictionary containing the FJSSP problem instance.

    Returns:
        dict: A dictionary representing the schedule.
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    # Initialize data structures
    machine_available_times = {m: 0 for m in range(n_machines)}
    job_completion_times = {j: 0 for j in jobs_data}
    schedule = {j: [] for j in jobs_data}

    # Iterate through jobs and operations
    for job_id in jobs_data:
        for operation_index, operation in enumerate(jobs_data[job_id]):
            possible_machines = operation[0]
            processing_times = operation[1]

            # Evaluate machines based on completion time and machine load
            best_machine = None
            min_end_time = float('inf')

            for i, machine_id in enumerate(possible_machines):
                processing_time = processing_times[i]
                available_time = machine_available_times[machine_id]
                start_time = max(available_time, job_completion_times[job_id])
                end_time = start_time + processing_time

                if end_time < min_end_time:
                    min_end_time = end_time
                    best_machine = machine_id
                    best_start_time = start_time
                    best_processing_time = processing_time

            # Schedule the operation on the best machine
            schedule[job_id].append({
                'Operation': operation_index + 1,
                'Assigned Machine': best_machine,
                'Start Time': best_start_time,
                'End Time': best_start_time + best_processing_time,
                'Processing Time': best_processing_time
            })

            # Update machine available time and job completion time
            machine_available_times[best_machine] = best_start_time + best_processing_time
            job_completion_times[job_id] = best_start_time + best_processing_time

    return schedule
