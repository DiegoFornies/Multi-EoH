
def heuristic(input_data):
    """
    A heuristic for the Flexible Job Shop Scheduling Problem (FJSSP).

    This heuristic prioritizes jobs with fewer operations and assigns operations
    to the machine with the earliest available time, considering machine load
    balancing.
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    # Initialize schedule and machine availability
    schedule = {}
    machine_availability = {m: 0 for m in range(n_machines)}
    job_completion = {j: 0 for j in jobs}

    # Sort jobs based on the number of operations (shortest job first)
    job_priority = sorted(jobs.keys(), key=lambda job: len(jobs[job]))

    for job in job_priority:
        schedule[job] = []
        for op_num, operation in enumerate(jobs[job], 1):
            machines, times = operation

            # Find the machine with the earliest available time
            best_machine, best_time, best_processing_time = None, float('inf'), None
            for i in range(len(machines)):
                machine = machines[i]
                processing_time = times[i]
                available_time = max(machine_availability[machine], job_completion[job])

                if available_time < best_time:
                    best_time = available_time
                    best_machine = machine
                    best_processing_time = processing_time

            # Schedule the operation on the best machine
            start_time = best_time
            end_time = start_time + best_processing_time
            schedule[job].append({
                'Operation': op_num,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': best_processing_time
            })

            # Update machine availability and job completion time
            machine_availability[best_machine] = end_time
            job_completion[job] = end_time

    return schedule
