
def heuristic(input_data):
    """
    Heuristic for Flexible Job Shop Scheduling Problem (FJSSP).

    This heuristic prioritizes operations based on the shortest processing time
    among available machines and aims to balance machine workload.
    It considers makespan, separation between operations of the same job,
    and machine load balance as secondary objectives.
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    # Initialize schedule, machine available times, and job completion times
    schedule = {}
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in range(1, n_jobs + 1)}

    # Create a list of operations, sorted by job and operation number
    operations = []
    for job_id, job_ops in jobs.items():
        for op_num, op_data in enumerate(job_ops, 1):
            operations.append((job_id, op_num, op_data))  # (job_id, op_num, (machines, times))

    # Sort operations based on the shortest processing time available
    operations.sort(key=lambda x: min(x[2][1]))

    # Schedule each operation
    for job_id, op_num, op_data in operations:
        machines, times = op_data

        # Find the machine with the earliest available time for this operation
        best_machine = None
        min_end_time = float('inf')
        processing_time = None

        for i, machine in enumerate(machines):
            start_time = max(machine_available_time[machine], job_completion_time[job_id])
            end_time = start_time + times[i]

            if end_time < min_end_time:
                min_end_time = end_time
                best_machine = machine
                processing_time = times[i]

        # Update schedule with the selected machine and times
        start_time = max(machine_available_time[best_machine], job_completion_time[job_id])
        end_time = start_time + processing_time

        if job_id not in schedule:
            schedule[job_id] = []

        schedule[job_id].append({
            'Operation': op_num,
            'Assigned Machine': best_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': processing_time
        })

        # Update machine available time and job completion time
        machine_available_time[best_machine] = end_time
        job_completion_time[job_id] = end_time

    return schedule
