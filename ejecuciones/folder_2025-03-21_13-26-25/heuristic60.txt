
def heuristic(input_data):
    """
    A heuristic to solve the Flexible Job Shop Scheduling Problem (FJSSP).
    This heuristic prioritizes minimizing makespan, reducing time between operations in the same job,
    and balancing machine load.  It uses a shortest processing time (SPT) rule and considers
    machine availability and job waiting time.
    """
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    # Initialize data structures
    schedule = {}
    machine_available_times = {m: 0 for m in range(n_machines)}
    job_last_end_times = {j: 0 for j in range(1, n_jobs + 1)}
    job_waiting_times = {j: 0 for j in range(1, n_jobs + 1)}  # Track waiting time for each job


    # Ready operations: list of (job_id, operation_index) tuples
    ready_operations = []
    for job_id, operations in jobs.items():
        ready_operations.append((job_id, 0))  # Start with the first operation of each job

    # Main scheduling loop
    while ready_operations:
        # Choose the next operation to schedule using SPT, earliest start time, and job waiting time
        best_job, best_op_idx, best_machine, best_start_time, best_processing_time, best_priority = None, None, None, float('inf'), None, float('inf')

        for job_id, op_idx in ready_operations:
            machines, times = jobs[job_id][op_idx]

            # Find the machine that allows the earliest start time for this operation
            for m_idx, machine in enumerate(machines):
                processing_time = times[m_idx]
                start_time = max(machine_available_times[machine], job_last_end_times[job_id])

                # Calculate a priority based on SPT and waiting time
                priority = processing_time + 0.1 * job_waiting_times[job_id]  # Adjust the weight for waiting time

                if start_time < best_start_time or (start_time == best_start_time and priority < best_priority): # prioritize earlier start time, and if same, shorter processing time

                    best_job, best_op_idx, best_machine, best_start_time, best_processing_time, best_priority = job_id, op_idx, machine, start_time, processing_time, priority

        # Schedule the best operation
        job_id = best_job
        op_idx = best_op_idx
        machine = best_machine
        start_time = best_start_time
        processing_time = best_processing_time

        end_time = start_time + processing_time

        if job_id not in schedule:
            schedule[job_id] = []

        schedule[job_id].append({
            'Operation': op_idx + 1,
            'Assigned Machine': machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': processing_time
        })

        # Update machine and job availability
        machine_available_times[machine] = end_time
        job_last_end_times[job_id] = end_time

        # Update waiting times for all jobs (except the scheduled one)
        for j in range(1, n_jobs + 1):
            if j != job_id:
                job_waiting_times[j] += processing_time # Increase waiting time of waiting jobs

        job_waiting_times[job_id] = 0 # Reset the waiting time of assigned job

        # Remove the scheduled operation from ready_operations
        ready_operations.remove((job_id, op_idx))

        # Add the next operation of the job to ready_operations, if it exists
        if op_idx + 1 < len(jobs[job_id]):
            ready_operations.append((job_id, op_idx + 1))

    return schedule
