
def heuristic(input_data):
    """Combines SPT, job priority, and load balancing for FJSSP."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    job_priorities = {}
    for job, ops in jobs_data.items():
        total_time = sum(min(times) for machines, times in ops)
        job_priorities[job] = total_time

    sorted_jobs = sorted(job_priorities.items(), key=lambda item: item[1], reverse=True)

    schedule = {}
    machine_availability = {m: 0 for m in range(n_machines)}
    job_completion_times = {job: 0 for job in range(1, n_jobs + 1)}
    operation_counter = {job: 0 for job in range(1, n_jobs + 1)}

    for job, _ in sorted_jobs:
        schedule[job] = []
        current_job_completion_time = job_completion_times[job]
        
        for op_index, operation_data in enumerate(jobs_data[job]):
            machines, times = operation_data
            operation_number = operation_counter[job] + 1
            operation_counter[job] = operation_number
            
            best_machine = None
            earliest_start_time = float('inf')
            best_processing_time = None
            
            for machine_index, machine in enumerate(machines):
                processing_time = times[machine_index]
                available_time_on_machine = machine_availability[machine]
                start_time = max(available_time_on_machine, current_job_completion_time)
                
                if start_time < earliest_start_time:
                    earliest_start_time = start_time
                    best_machine = machine
                    best_processing_time = processing_time

            if best_machine is None:
                best_machine = machines[0]
                best_processing_time = times[0]
                earliest_start_time = max(machine_availability[best_machine], current_job_completion_time)
            
            current_machine_load = machine_availability[best_machine]

            if len(machines) > 1 and current_machine_load > 0 and (op_index % 3 != 0):
                for machine_index, machine in enumerate(machines):
                    if machine == best_machine:
                        continue
                    
                    processing_time = times[machine_index]
                    available_time_on_machine = machine_availability[machine]
                    start_time = max(available_time_on_machine, current_job_completion_time)

                    if start_time < (earliest_start_time * 1.1) and machine_availability[machine] < current_machine_load:
                        best_machine = machine
                        best_processing_time = processing_time
                        earliest_start_time = start_time
                        break

            start_time = earliest_start_time
            end_time = start_time + best_processing_time

            schedule[job].append({
                'Operation': operation_number,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': best_processing_time
            })

            machine_availability[best_machine] = end_time
            current_job_completion_time = end_time
            job_completion_times[job] = current_job_completion_time

    return schedule
