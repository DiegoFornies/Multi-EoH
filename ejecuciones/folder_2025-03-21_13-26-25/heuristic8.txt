
def heuristic(input_data):
    """
    A heuristic for the Flexible Job Shop Scheduling Problem (FJSSP).
    This heuristic considers machine load balancing and job completion time.
    """
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    # Initialize data structures
    schedule = {}
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in jobs}
    machine_load = {m: 0 for m in range(n_machines)}

    # Prioritize jobs based on the number of operations (more operations first)
    job_priority = sorted(jobs.keys(), key=lambda job_id: len(jobs[job_id]), reverse=True)

    # Iterate through jobs based on priority
    for job in job_priority:
        schedule[job] = []
        operations = jobs[job]

        # Iterate through operations
        for op_idx, operation in enumerate(operations):
            machines, times = operation

            # Find the best machine for the current operation
            best_machine = None
            min_end_time = float('inf')

            for machine_idx, machine in enumerate(machines):
                processing_time = times[machine_idx]

                # Calculate start time based on machine and job availability
                start_time = max(machine_available_time[machine], job_completion_time[job])
                end_time = start_time + processing_time

                # Choose the machine that minimizes the operation's end time and balances the machine load
                if end_time < min_end_time:
                    min_end_time = end_time
                    best_machine = machine
                    best_start_time = start_time
                    best_processing_time = processing_time
                    

            # Assign the operation to the best machine
            schedule[job].append({
                'Operation': op_idx + 1,
                'Assigned Machine': best_machine,
                'Start Time': best_start_time,
                'End Time': best_start_time + best_processing_time,
                'Processing Time': best_processing_time
            })

            # Update machine and job completion times
            machine_available_time[best_machine] = best_start_time + best_processing_time
            job_completion_time[job] = best_start_time + best_processing_time
            machine_load[best_machine] += best_processing_time

    return schedule
