
def heuristic(input_data):
    """
    Combines SPT job sorting with earliest start time machine selection.
    Prioritizes shortest jobs and earliest machine availability.
    """
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    job_ids = sorted(jobs_data.keys(), key=lambda job_id: len(jobs_data[job_id]))

    schedule = {}
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {job_id: 0 for job_id in jobs_data.keys()}

    for job_id in job_ids:
        schedule[job_id] = []
        operations = jobs_data[job_id]

        for op_idx, operation in enumerate(operations):
            possible_machines = operation[0]
            processing_times = operation[1]

            best_machine = None
            earliest_completion_time = float('inf')
            chosen_processing_time = None

            for m_idx, machine_id in enumerate(possible_machines):
                processing_time = processing_times[m_idx]
                start_time = max(machine_available_time[machine_id], job_completion_time[job_id])
                completion_time = start_time + processing_time

                if completion_time < earliest_completion_time:
                    earliest_completion_time = completion_time
                    best_machine = machine_id
                    chosen_processing_time = processing_time

            start_time = max(machine_available_time[best_machine], job_completion_time[job_id])
            end_time = start_time + chosen_processing_time

            schedule[job_id].append({
                'Operation': op_idx + 1,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': chosen_processing_time
            })

            machine_available_time[best_machine] = end_time
            job_completion_time[job_id] = end_time

    return schedule
