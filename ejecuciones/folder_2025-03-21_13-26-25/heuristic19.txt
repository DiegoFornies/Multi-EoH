
def heuristic(input_data):
    """
    A heuristic for the Flexible Job Shop Scheduling Problem (FJSSP).

    This heuristic considers multiple factors to improve the schedule:
    1. Machine Load Balancing:  Chooses the least loaded machine among available options.
    2. Job Completion Time: Prioritizes machines that allow jobs to finish sooner.
    3. Operation Processing Time: Favors shorter processing times to minimize overall makespan.

    Args:
        input_data (dict): A dictionary containing job information,
                           including the number of jobs, machines, and operation details.

    Returns:
        dict: A dictionary representing the schedule, where each key is a job number,
              and the value is a list of dictionaries containing operation details
              (Operation, Assigned Machine, Start Time, End Time, Processing Time).
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    schedule = {}
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in range(1, n_jobs + 1)}  # Initialize job completion times
    machine_jobs = {m: [] for m in range(n_machines)} # Keep track of which jobs are using each machine to avoid deadlock and circular dependencies during the scheduling process

    for job in jobs:
        schedule[job] = []
        for op_idx, operation in enumerate(jobs[job]):
            machines, times = operation

            # Evaluate candidate machines based on multiple criteria
            best_machine = None
            min_end_time = float('inf')

            for machine_idx, machine in enumerate(machines):
                processing_time = times[machine_idx]
                start_time = max(machine_available_time[machine], job_completion_time[job])
                end_time = start_time + processing_time

                # Prioritize: 1) Least loaded machine, 2) Quickest job completion, 3) Shortest processing time
                if end_time < min_end_time:
                     # Check if this machine is already processing the current job, to avoid possible cyclic dependency
                    if job not in machine_jobs[machine]:
                        min_end_time = end_time
                        best_machine = machine
                        best_start_time = start_time
                        best_processing_time = processing_time

            # Assign the operation to the selected machine
            if best_machine is not None:
                schedule[job].append({
                    'Operation': op_idx + 1,
                    'Assigned Machine': best_machine,
                    'Start Time': best_start_time,
                    'End Time': best_start_time + best_processing_time,
                    'Processing Time': best_processing_time
                })

                # Update machine and job completion times
                machine_available_time[best_machine] = best_start_time + best_processing_time
                job_completion_time[job] = best_start_time + best_processing_time

                machine_jobs[best_machine].append(job) # update that the best machine is being used for current job.
            else:
                # Handle the case where no suitable machine is found.
                # This could happen if the constraints are very tight.
                # A more robust solution might involve backtracking or constraint relaxation.
                # For simplicity, raise an exception here. A production system would use logging/recovery.
                raise ValueError(f"No machine available for job {job}, operation {op_idx + 1}")

    return schedule
