
def heuristic(input_data):
    """
    A heuristic for the Flexible Job Shop Scheduling Problem (FJSSP).

    This heuristic prioritizes jobs with fewer operations and machines with
    less workload, aiming to minimize makespan and balance machine load.
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    # Initialize data structures
    schedule = {}
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in jobs_data.keys()}

    # Job priority: prioritize jobs with fewer operations
    job_priority = sorted(jobs_data.keys(), key=lambda job: len(jobs_data[job]))

    # Iterate through jobs based on priority
    for job in job_priority:
        schedule[job] = []
        operations = jobs_data[job]
        
        for op_idx, operation in enumerate(operations, 1):
            machines, times = operation

            # Machine priority: prioritize machines with earlier available time
            machine_priority = sorted(machines, key=lambda m: machine_available_time[m])
            
            best_machine = None
            best_start_time = float('inf')
            best_processing_time = None
            
            for machine in machine_priority:
                processing_time = times[machines.index(machine)]
                start_time = max(machine_available_time[machine], job_completion_time[job])

                if start_time < best_start_time:
                    best_start_time = start_time
                    best_machine = machine
                    best_processing_time = processing_time
                    
            start_time = best_start_time
            end_time = start_time + best_processing_time

            schedule[job].append({
                'Operation': op_idx,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': best_processing_time
            })

            machine_available_time[best_machine] = end_time
            job_completion_time[job] = end_time

    return schedule
