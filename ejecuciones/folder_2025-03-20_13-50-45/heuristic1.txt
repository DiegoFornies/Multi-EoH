
def heuristic(input_data):
    """
    A heuristic function for solving the Flexible Job Shop Scheduling Problem (FJSP).
    This heuristic prioritizes minimizing makespan by considering machine availability
    and operation processing times, and attempts to balance machine load by selecting the
    least loaded machine for each operation when multiple machines are available.
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    # Initialize schedule and machine availability
    schedule = {job: [] for job in range(1, n_jobs + 1)}
    machine_availability = {m: 0 for m in range(n_machines)}
    job_completion_times = {job: 0 for job in range(1, n_jobs + 1)}

    # Sort operations by shortest processing time within each job to help reducing makespan
    for job in jobs:
        jobs[job] = sorted(jobs[job], key=lambda op: min(op[1]))

    # Iterate through each job and its operations
    for job in range(1, n_jobs + 1):
        for op_index, operation in enumerate(jobs[job]):
            machines, times = operation

            # Find the earliest available machine and its corresponding start time
            best_machine = None
            earliest_start_time = float('inf')
            processing_time = None

            # Iterate through the possible machines for this operation
            for i, machine in enumerate(machines):
                start_time = max(machine_availability[machine], job_completion_times[job])

                if start_time < earliest_start_time:
                    earliest_start_time = start_time
                    best_machine = machine
                    processing_time = times[i]

            # Schedule the operation on the best machine
            start_time = earliest_start_time
            end_time = start_time + processing_time
            schedule[job].append({
                'Operation': op_index + 1,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': processing_time
            })

            # Update machine availability and job completion time
            machine_availability[best_machine] = end_time
            job_completion_times[job] = end_time

    return schedule
