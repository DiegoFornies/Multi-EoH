
def heuristic(input_data):
    """
    A heuristic algorithm for solving the Flexible Job Shop Scheduling Problem (FJSSP).

    This heuristic prioritizes jobs with fewer operations and machines with less utilization.

    Args:
        input_data (dict): A dictionary containing the problem data.

    Returns:
        dict: A dictionary representing the schedule.
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    schedule = {}
    machine_available_times = {m: 0 for m in range(n_machines)}
    job_completion_times = {job: 0 for job in range(1, n_jobs + 1)}

    # Sort jobs by number of operations (fewer first)
    job_priority = sorted(jobs_data.keys(), key=lambda job: len(jobs_data[job]))

    # Iterate through jobs based on priority
    for job in job_priority:
        schedule[job] = []
        operations = jobs_data[job]

        for op_num, (machines, times) in enumerate(operations, 1):
            # Prioritize machines with earlier available times
            available_machines = []
            for i in range(len(machines)):
                machine = machines[i]
                available_machines.append((machine, machine_available_times[machine]))

            available_machines.sort(key=lambda x: x[1]) #sorting machines by earliest available time

            # Choose the best machine and its processing time
            best_machine = available_machines[0][0]
            machine_index = machines.index(best_machine)
            processing_time = times[machine_index]
            
            # Ensure that the operation respects precedence constraints from previous job operations.
            start_time = max(machine_available_times[best_machine], job_completion_times[job])
            end_time = start_time + processing_time

            # Update machine available time and job completion time
            machine_available_times[best_machine] = end_time
            job_completion_times[job] = end_time

            # Append the scheduled operation to the schedule
            schedule[job].append({
                'Operation': op_num,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': processing_time
            })

    return schedule
