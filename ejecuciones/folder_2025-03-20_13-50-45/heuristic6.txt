
def heuristic(input_data):
    """Schedules jobs to minimize makespan and balance machine load."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    schedule = {}
    machine_load = {m: 0 for m in range(n_machines)}
    job_completion_times = {j: 0 for j in range(1, n_jobs + 1)}
    
    eligible_operations = {}
    for job_id, operations in jobs_data.items():
        eligible_operations[job_id] = 0

    scheduled_operations = 0
    total_operations = sum(len(ops) for ops in jobs_data.values())

    while scheduled_operations < total_operations:
        best_job, best_op_idx, best_machine, best_start_time, best_processing_time = None, None, None, float('inf'), None

        for job_id, op_idx in eligible_operations.items():
            if op_idx >= len(jobs_data[job_id]):
                continue

            machines, times = jobs_data[job_id][op_idx]
            for m_idx, machine in enumerate(machines):
                processing_time = times[m_idx]
                start_time = max(machine_load[machine], job_completion_times[job_id])

                # Prioritize machines with lower load
                load_factor = machine_load[machine] / (sum(machine_load.values()) + 1e-9)
                weighted_start_time = start_time + load_factor * 10  # Adjust factor as needed

                if weighted_start_time < best_start_time:
                    best_job, best_op_idx, best_machine, best_start_time, best_processing_time = job_id, op_idx, machine, start_time, processing_time

        if best_job is not None:
            if best_job not in schedule:
                schedule[best_job] = []
            
            operation_number = best_op_idx + 1

            schedule[best_job].append({
                'Operation': operation_number,
                'Assigned Machine': best_machine,
                'Start Time': best_start_time,
                'End Time': best_start_time + best_processing_time,
                'Processing Time': best_processing_time
            })

            machine_load[best_machine] = best_start_time + best_processing_time
            job_completion_times[best_job] = best_start_time + best_processing_time

            eligible_operations[best_job] += 1
            scheduled_operations += 1

    return schedule
