
def heuristic(input_data):
    """
    Hybrid heuristic for FJSP: SPT + Least Flexibility + Earliest Start.
    Prioritizes short operations, less flexible operations, and early starts.
    """
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    machine_available_times = {m: 0 for m in range(n_machines)}
    job_completion_times = {j: 0 for j in range(1, n_jobs + 1)}
    schedule = {j: [] for j in range(1, n_jobs + 1)}

    ready_operations = []
    for job_id, operations in jobs.items():
        if operations:
            ready_operations.append((job_id, 0))

    while ready_operations:
        best_operation = None
        best_priority = float('inf')

        for job_id, operation_index in ready_operations:
            machines, times = jobs[job_id][operation_index]
            priority = (sum(times) / len(times)) + (len(machines) * 0.1)

            if priority < best_priority:
                best_priority = priority
                best_operation = (job_id, operation_index)

        if best_operation is None:
            break

        job_id, operation_index = best_operation
        machines, times = jobs[job_id][operation_index]

        best_machine = None
        earliest_start_time = float('inf')

        for m_index, machine in enumerate(machines):
            start_time = max(machine_available_times[machine], job_completion_times[job_id])
            if start_time < earliest_start_time:
                earliest_start_time = start_time
                best_machine = machine
                processing_time = times[m_index]

        start_time = earliest_start_time
        end_time = start_time + processing_time

        schedule[job_id].append({
            'Operation': operation_index + 1,
            'Assigned Machine': best_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': processing_time
        })

        machine_available_times[best_machine] = end_time
        job_completion_times[job_id] = end_time
        ready_operations.remove((job_id, operation_index))

        if operation_index + 1 < len(jobs[job_id]):
            ready_operations.append((job_id, operation_index + 1))

    return schedule
