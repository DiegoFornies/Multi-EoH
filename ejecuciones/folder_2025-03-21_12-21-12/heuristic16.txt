
def heuristic(input_data):
    """Combines machine load balancing & job completion time."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in range(1, n_jobs + 1)}
    machine_loads = {m: 0 for m in range(n_machines)}

    solution = {}
    operations_list = []
    for job_id, operations in jobs.items():
        for op_idx, operation_data in enumerate(operations):
            operations_list.append((job_id, op_idx + 1, operation_data))

    while operations_list:
        best_job, best_op_idx, best_operation_data = None, None, None
        min_weighted_end_time = float('inf')

        for job_id, op_idx, operation_data in operations_list:
            machines, times = operation_data
            for machine_index, processing_time in zip(machines, times):
                start_time = max(machine_available_time[machine_index], job_completion_time[job_id])
                end_time = start_time + processing_time
                weighted_end_time = end_time + machine_loads[machine_index] # Prioritize based on machine load

                if weighted_end_time < min_weighted_end_time:
                    min_weighted_end_time = weighted_end_time
                    best_job, best_op_idx, best_operation_data = job_id, op_idx, operation_data
                    best_machine = machine_index
                    best_processing_time = processing_time
                    best_start_time = start_time

        machines, times = best_operation_data
        if best_job not in solution:
            solution[best_job] = []

        solution[best_job].append({
            'Operation': best_op_idx,
            'Assigned Machine': best_machine,
            'Start Time': best_start_time,
            'End Time': best_start_time + best_processing_time,
            'Processing Time': best_processing_time
        })

        machine_available_time[best_machine] = best_start_time + best_processing_time
        job_completion_time[best_job] = best_start_time + best_processing_time
        machine_loads[best_machine] += best_processing_time
        operations_list.remove((best_job, best_op_idx, best_operation_data))

    return solution
