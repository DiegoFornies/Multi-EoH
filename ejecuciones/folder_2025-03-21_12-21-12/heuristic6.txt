
def heuristic(input_data):
    """
    A heuristic for the Flexible Job Shop Scheduling Problem (FJSP) that considers
    minimizing makespan, reducing time between operations in the same job,
    and balancing machine load.

    Args:
        input_data (dict): A dictionary containing the problem data.

    Returns:
        dict: A dictionary representing the schedule.
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    # Initialize data structures
    schedule = {}
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_last_end_time = {j: 0 for j in jobs}

    # Iterate through jobs and operations
    for job_id in sorted(jobs.keys()):  # Sort jobs by number of operations
        schedule[job_id] = []
        operations = jobs[job_id]

        for op_idx, op_data in enumerate(operations):
            available_machines, processing_times = op_data

            # Find the machine that minimizes the completion time of the current operation,
            # considering both machine availability and job precedence.
            best_machine = None
            min_completion_time = float('inf')

            for machine_idx, machine_id in enumerate(available_machines):
                proc_time = processing_times[machine_idx]
                start_time = max(machine_available_time[machine_id], job_last_end_time[job_id])
                completion_time = start_time + proc_time

                if completion_time < min_completion_time:
                    min_completion_time = completion_time
                    best_machine = machine_id
                    best_proc_time = proc_time
                    best_start_time = start_time

            # Schedule the operation on the chosen machine
            schedule[job_id].append({
                'Operation': op_idx + 1,
                'Assigned Machine': best_machine,
                'Start Time': best_start_time,
                'End Time': best_start_time + best_proc_time,
                'Processing Time': best_proc_time
            })

            # Update machine availability and job last end time
            machine_available_time[best_machine] = best_start_time + best_proc_time
            job_last_end_time[job_id] = best_start_time + best_proc_time

    return schedule
