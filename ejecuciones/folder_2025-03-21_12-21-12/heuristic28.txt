
def heuristic(input_data):
    """Combines SPT-based scheduling with machine load balancing."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    machine_available_times = {m: 0 for m in range(n_machines)}
    job_completion_times = {j: 0 for j in jobs}
    machine_loads = {m: 0 for m in range(n_machines)}
    solution = {}
    operation_queue = []
    for job, operations in jobs.items():
        operation_queue.append((job, 0))

    def calculate_priority(job, op_index):
        operation = jobs[job][op_index]
        machines, times = operation
        min_time = min(times)
        machine_index = machines[times.index(min_time)]
        start_time = max(machine_available_times[machine_index], job_completion_times[job])
        return start_time + min_time + machine_loads[machine_index]

    def find_best_machine(job, op_index):
        operation = jobs[job][op_index]
        machines, times = operation
        best_machine = None
        best_time = float('inf')
        selected_machine = None
        processing_time = None
        for i in range(len(machines)):
            machine = machines[i]
            current_time = times[i]
            start_time = max(machine_available_times[machine], job_completion_times[job])
            end_time = start_time + current_time
            if end_time < best_time:
                best_time = end_time
                selected_machine = machine
                processing_time = current_time
        return selected_machine, processing_time

    scheduled_operations = 0
    while scheduled_operations < sum(len(ops) for ops in jobs.values()):
        if not operation_queue:
            break
        operation_queue.sort(key=lambda x: calculate_priority(x[0], x[1]))
        best_job = operation_queue[0][0]
        best_op_index = operation_queue[0][1]
        operation = jobs[best_job][best_op_index]
        op_number = best_op_index + 1
        assigned_machine, processing_time = find_best_machine(best_job, best_op_index)
        start_time = max(machine_available_times[assigned_machine], job_completion_times[best_job])
        end_time = start_time + processing_time

        if best_job not in solution:
            solution[best_job] = []
        solution[best_job].append({
            'Operation': op_number,
            'Assigned Machine': assigned_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': processing_time
        })

        machine_available_times[assigned_machine] = end_time
        job_completion_times[best_job] = end_time
        machine_loads[assigned_machine] += processing_time
        operation_queue.pop(0)

        if best_op_index + 1 < len(jobs[best_job]):
            operation_queue.append((best_job, best_op_index + 1))
        scheduled_operations += 1

    return solution
