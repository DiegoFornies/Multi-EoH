
def heuristic(input_data):
    """Combines earliest start time and machine load balancing."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    machine_available_times = {m: 0 for m in range(n_machines)}
    job_completion_times = {j: 0 for j in range(1, n_jobs + 1)}
    machine_loads = {m: 0 for m in range(n_machines)}
    solution = {}

    operation_queue = []
    for job, operations in jobs.items():
        operation_queue.append((job, 0))

    def calculate_priority(job, op_index, machine):
        operation = jobs[job][op_index]
        machines, times = operation
        i = machines.index(machine)
        processing_time = times[i]
        start_time = max(machine_available_times[machine], job_completion_times[job])
        end_time = start_time + processing_time
        load_penalty = machine_loads[machine]
        return end_time + load_penalty / 10
        
    scheduled_operations = 0
    while scheduled_operations < sum(len(ops) for ops in jobs.values()):
        best_job = None
        best_op_index = None
        best_machine = None
        min_priority = float('inf')
        best_processing_time = None

        for job, op_index in operation_queue:
            operation = jobs[job][op_index]
            machines, times = operation
            
            for i in range(len(machines)):
                machine = machines[i]
                
                priority = calculate_priority(job, op_index, machine)

                if priority < min_priority:
                    min_priority = priority
                    best_job = job
                    best_op_index = op_index
                    best_machine = machine
                    best_processing_time = times[i] # Get processing time

        if best_job is None:
            break

        start_time = max(machine_available_times[best_machine], job_completion_times[best_job])
        end_time = start_time + best_processing_time
        
        op_number = best_op_index + 1

        if best_job not in solution:
            solution[best_job] = []

        solution[best_job].append({
            'Operation': op_number,
            'Assigned Machine': best_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': best_processing_time
        })

        machine_available_times[best_machine] = end_time
        job_completion_times[best_job] = end_time
        machine_loads[best_machine] += best_processing_time
        
        operation_queue.remove((best_job, best_op_index))
        if best_op_index + 1 < len(jobs[best_job]):
            operation_queue.append((best_job, best_op_index + 1))

        scheduled_operations += 1

    return solution
