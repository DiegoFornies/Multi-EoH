
def heuristic(input_data):
    """
    A heuristic algorithm for solving the Flexible Job Shop Scheduling Problem (FJSP).
    This version prioritizes minimizing makespan and machine idle time.

    Args:
        input_data (dict): A dictionary containing the FJSP problem data.

    Returns:
        dict: A dictionary representing the schedule, where keys are job numbers and
              values are lists of operation dictionaries. Each operation dictionary
              contains the assigned machine, start time, end time, and processing time.
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    # Initialize data structures
    schedule = {}
    machine_available_time = {m: 0 for m in range(n_machines)}  # Track when each machine is available
    job_completion_time = {j: 0 for j in range(1, n_jobs + 1)}  # Track when each job can start its next operation
    machine_load = {m: 0 for m in range(n_machines)} # Track the workload of each machine
    
    # Create a list of operations sorted by the number of possible machines (smallest first)
    operations = []
    for job, ops in jobs.items():
        for op_num, (machines, times) in enumerate(ops, 1):
            operations.append((job, op_num, machines, times))

    operations.sort(key=lambda x: len(x[2]))  # Sort by number of candidate machines

    # Schedule operations
    for job, op_num, machines, times in operations:
        best_machine = None
        earliest_start = float('inf')
        best_processing_time = None

        # Find the best machine to minimize start time (considering machine availability and job completion)
        for i, machine in enumerate(machines):
            processing_time = times[i]
            start_time = max(machine_available_time[machine], job_completion_time[job])

            if start_time < earliest_start:
                earliest_start = start_time
                best_machine = machine
                best_processing_time = processing_time

        # Assign the operation to the chosen machine
        start_time = max(machine_available_time[best_machine], job_completion_time[job])
        end_time = start_time + best_processing_time
        
        # Update machine and job completion times
        machine_available_time[best_machine] = end_time
        job_completion_time[job] = end_time
        machine_load[best_machine] += best_processing_time

        # Store the scheduled operation
        if job not in schedule:
            schedule[job] = []
        schedule[job].append({
            'Operation': op_num,
            'Assigned Machine': best_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': best_processing_time
        })

    return schedule
