
def heuristic(input_data):
    """Schedules jobs minimizing makespan and balancing machine load."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    schedule = {}
    machine_available_times = {m: 0 for m in range(n_machines)}
    job_completion_times = {j: 0 for j in range(1, n_jobs + 1)}

    # Sort jobs by number of operations to prioritize shorter jobs
    job_priority = sorted(jobs.keys(), key=lambda job_id: len(jobs[job_id]))

    for job_id in job_priority:
        schedule[job_id] = []
        operations = jobs[job_id]
        current_job_completion_time = job_completion_times[job_id]

        for op_idx, operation in enumerate(operations, 1):
            possible_machines, possible_times = operation

            best_machine = None
            min_end_time = float('inf')

            for i in range(len(possible_machines)):
                machine = possible_machines[i]
                processing_time = possible_times[i]

                available_time_on_machine = machine_available_times[machine]
                start_time = max(current_job_completion_time, available_time_on_machine)
                end_time = start_time + processing_time

                if end_time < min_end_time:
                    min_end_time = end_time
                    best_machine = machine
                    best_start_time = start_time
                    best_processing_time = processing_time

            schedule[job_id].append({
                'Operation': op_idx,
                'Assigned Machine': best_machine,
                'Start Time': best_start_time,
                'End Time': best_start_time + best_processing_time,
                'Processing Time': best_processing_time
            })

            machine_available_times[best_machine] = best_start_time + best_processing_time
            current_job_completion_time = best_start_time + best_processing_time
            job_completion_times[job_id] = current_job_completion_time

    return schedule
