
def heuristic(input_data):
    """
    Schedules jobs considering shortest processing time and machine availability.
    Minimizes makespan by prioritizing operations with shorter durations.
    """
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    machine_available_times = {m: 0 for m in range(n_machines)}
    job_completion_times = {j: 0 for j in jobs}
    machine_assignments = {m: [] for m in range(n_machines)}
    solution = {}
    operation_queue = []

    for job, operations in jobs.items():
        operation_queue.append((job, 0))

    def calculate_earliest_start_time(job, op_index):
        operation = jobs[job][op_index]
        machines, times = operation
        earliest_start = float('inf')
        best_machine = None
        best_time = None

        for i in range(len(machines)):
            machine = machines[i]
            processing_time = times[i]
            start_time = max(machine_available_times[machine], job_completion_times[job])

            if start_time < earliest_start:
                earliest_start = start_time
                best_machine = machine
                best_time = processing_time

        return earliest_start, best_machine, best_time

    scheduled_operations = 0
    while scheduled_operations < sum(len(ops) for ops in jobs.values()):
        best_job = None
        best_op_index = None
        earliest_start = float('inf')
        best_machine = None
        best_processing_time = None

        for job, op_index in operation_queue:
            start, machine, time = calculate_earliest_start_time(job, op_index)

            if start < earliest_start:
                earliest_start = start
                best_job = job
                best_op_index = op_index
                best_machine = machine
                best_processing_time = time

        if best_job is None:
            break

        operation = jobs[best_job][best_op_index]
        op_number = best_op_index + 1
        start_time = earliest_start
        end_time = start_time + best_processing_time
        assigned_machine = best_machine

        if best_job not in solution:
            solution[best_job] = []

        solution[best_job].append({
            'Operation': op_number,
            'Assigned Machine': assigned_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': best_processing_time
        })

        machine_assignments[assigned_machine].append((best_job, op_number, start_time, end_time))
        machine_available_times[assigned_machine] = end_time
        job_completion_times[best_job] = end_time
        operation_queue.remove((best_job, best_op_index))

        if best_op_index + 1 < len(jobs[best_job]):
            operation_queue.append((best_job, best_op_index + 1))

        scheduled_operations += 1

    return solution
