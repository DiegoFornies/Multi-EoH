
def heuristic(input_data):
    """Combines machine availability and shortest processing time."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    machine_available_times = {m: 0 for m in range(n_machines)}
    job_completion_times = {j: 0 for j in range(1, n_jobs + 1)}

    solution = {}

    for job_id in range(1, n_jobs + 1):
        solution[job_id] = []
        current_time = 0

        for op_idx, operation in enumerate(jobs[job_id], 1):
            possible_machines = operation[0]
            processing_times = operation[1]

            best_machine = None
            min_end_time = float('inf')
            best_processing_time = None

            for m_idx, machine_id in enumerate(possible_machines):
                processing_time = processing_times[m_idx]
                start_time = max(machine_available_times[machine_id], job_completion_times[job_id])
                end_time = start_time + processing_time

                if end_time < min_end_time:
                    min_end_time = end_time
                    best_machine = machine_id
                    best_processing_time = processing_time
                    best_start_time = start_time
            
            solution[job_id].append({
                'Operation': op_idx,
                'Assigned Machine': best_machine,
                'Start Time': best_start_time,
                'End Time': best_start_time + best_processing_time,
                'Processing Time': best_processing_time
            })

            machine_available_times[best_machine] = best_start_time + best_processing_time
            job_completion_times[job_id] = best_start_time + best_processing_time

    return solution
