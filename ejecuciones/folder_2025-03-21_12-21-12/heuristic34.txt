
def heuristic(input_data):
    """Combines earliest start time and machine load for FJSSP."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in range(1, n_jobs + 1)}
    machine_loads = {m: 0 for m in range(n_machines)}

    solution = {}
    operations = []
    for job_id, job_ops in jobs.items():
        for op_num, (machines, times) in enumerate(job_ops, 1):
            operations.append({
                'job_id': job_id,
                'op_num': op_num,
                'machines': machines,
                'times': times
            })

    for operation in operations:
        job_id = operation['job_id']
        op_num = operation['op_num']
        machines = operation['machines']
        times = operation['times']

        best_machine = None
        min_start_time = float('inf')
        best_processing_time = None

        for machine_index, machine in enumerate(machines):
            processing_time = times[machine_index]
            start_time = max(machine_available_time[machine], job_completion_time[job_id])
            end_time = start_time + processing_time
            load_penalty = machine_loads[machine]  # Load consideration

            if start_time + load_penalty < min_start_time: # Prioritize lower load
                min_start_time = start_time + load_penalty
                best_machine = machine
                best_processing_time = processing_time

        start_time = max(machine_available_time[best_machine], job_completion_time[job_id])
        end_time = start_time + best_processing_time

        if job_id not in solution:
            solution[job_id] = []

        solution[job_id].append({
            'Operation': op_num,
            'Assigned Machine': best_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': best_processing_time
        })

        machine_available_time[best_machine] = end_time
        job_completion_time[job_id] = end_time
        machine_loads[best_machine] += best_processing_time

    return solution
