
def heuristic(data):
    """
    A heuristic to solve the Flexible Job Shop Scheduling Problem (FJSSP).

    This heuristic aims to minimize makespan, reduce time between operations in the same job,
    and balance machine load. It uses a greedy approach to schedule operations on machines
    based on earliest available time and shortest processing time.

    Args:
        data (dict): A dictionary containing the problem data, including the number of jobs,
                     number of machines, and job operation details.

    Returns:
        dict: A dictionary representing the solution, where each key is a job number and
              the value is a list of dictionaries containing operation scheduling information
              (Assigned Machine, Start Time, End Time).
    """
    n_jobs = data['n_jobs']
    n_machines = data['n_machines']
    jobs = data['jobs']

    # Initialize machine availability times
    machine_available_time = {m: 0 for m in range(1, n_machines + 1)}

    # Initialize solution structure
    solution = {job: [] for job in range(1, n_jobs + 1)}

    # Initialize job completion times
    job_completion_time = {job: 0 for job in range(1, n_jobs + 1)}

    # Iterate through jobs and operations
    for job in range(1, n_jobs + 1):
        operations = jobs[job]
        for operation_index, operation in enumerate(operations):
            machines, processing_times = operation

            # Find the machine with the earliest available time among the possible machines
            best_machine = None
            min_end_time = float('inf')
            best_processing_time = None

            for i in range(len(machines)):
                machine = machines[i]
                processing_time = processing_times[i]
                start_time = max(machine_available_time[machine], job_completion_time[job])
                end_time = start_time + processing_time
                if end_time < min_end_time:
                    min_end_time = end_time
                    best_machine = machine
                    best_processing_time = processing_time

            # Schedule the operation on the selected machine
            start_time = max(machine_available_time[best_machine], job_completion_time[job])
            end_time = start_time + best_processing_time
            machine_available_time[best_machine] = end_time
            job_completion_time[job] = end_time

            solution[job].append({
                'Operation': operation_index + 1,
                'Assigned Machine': str(best_machine),
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': best_processing_time
            })

    return solution
