
def heuristic(input_data):
    """
    A heuristic algorithm for solving the Flexible Job Shop Scheduling Problem (FJSP).
    This heuristic aims to minimize makespan and balance machine load by considering
    machine availability and processing times. It prioritizes assigning operations
    to machines that minimize the completion time of the job and tries to balance the workload
    across machines.
    """
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    schedule = {}
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in range(1, n_jobs + 1)}  # Initialize job completion times

    for job_id, operations in jobs.items():
        schedule[job_id] = []
        for op_idx, operation in enumerate(operations, 1):
            possible_machines = operation[0]
            processing_times = operation[1]

            best_machine = None
            min_end_time = float('inf')

            # Evaluate each possible machine for the current operation
            for m_idx, machine_id in enumerate(possible_machines):
                processing_time = processing_times[m_idx]

                # Calculate the earliest possible start time on the current machine
                start_time = max(machine_available_time[machine_id], job_completion_time[job_id])
                end_time = start_time + processing_time

                # Choose the machine that results in the earliest completion time for the operation
                if end_time < min_end_time:
                    min_end_time = end_time
                    best_machine = machine_id
                    best_start_time = start_time
                    best_processing_time = processing_time

            # Assign the operation to the chosen machine
            schedule[job_id].append({
                'Operation': op_idx,
                'Assigned Machine': best_machine,
                'Start Time': best_start_time,
                'End Time': best_start_time + best_processing_time,
                'Processing Time': best_processing_time
            })

            # Update machine availability and job completion time
            machine_available_time[best_machine] = best_start_time + best_processing_time
            job_completion_time[job_id] = best_start_time + best_processing_time

    return schedule
