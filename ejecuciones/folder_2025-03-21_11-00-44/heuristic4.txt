
def heuristic(input_data):
    """
    A heuristic for the Flexible Job Shop Scheduling Problem (FJSSP).

    This heuristic aims to minimize makespan and balance machine load by
    prioritizing operations based on shortest processing time and selecting
    machines with the earliest available time.

    Args:
        input_data (dict): A dictionary containing the problem instance data.

    Returns:
        dict: A dictionary representing the schedule, where keys are job numbers
              and values are lists of operation dictionaries.
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    # Initialize data structures
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in range(1, n_jobs + 1)}
    schedule = {j: [] for j in range(1, n_jobs + 1)}

    # Create a list of all operations, sorted by shortest processing time
    operations = []
    for job, ops in jobs_data.items():
        for op_num, (machines, times) in enumerate(ops, 1):
            min_time = min(times)
            operations.append((job, op_num, machines, times, min_time))

    operations.sort(key=lambda x: x[4])  # Sort by shortest processing time

    # Schedule operations
    for job, op_num, machines, times, _ in operations:
        # Find the machine with the earliest available time among feasible machines
        best_machine = None
        earliest_start_time = float('inf')
        processing_time = None

        for i, machine in enumerate(machines):
            start_time = max(machine_available_time[machine], job_completion_time[job])
            if start_time < earliest_start_time:
                earliest_start_time = start_time
                best_machine = machine
                processing_time = times[i]

        # Assign the operation to the chosen machine
        start_time = earliest_start_time
        end_time = start_time + processing_time

        schedule[job].append({
            'Operation': op_num,
            'Assigned Machine': best_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': processing_time
        })

        # Update machine available time and job completion time
        machine_available_time[best_machine] = end_time
        job_completion_time[job] = end_time

    return schedule
