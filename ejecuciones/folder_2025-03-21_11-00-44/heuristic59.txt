
def heuristic(data):
    """
    A heuristic for solving the Flexible Job Shop Scheduling Problem (FJSSP).

    Args:
        data (dict): A dictionary containing the problem data.

    Returns:
        dict: A dictionary representing the schedule.
    """

    n_jobs = data['n_jobs']
    n_machines = data['n_machines']
    jobs = data['jobs']

    # Initialize schedule
    schedule = {}
    for job in jobs:
        schedule[job] = []

    # Initialize machine availability times
    machine_availability = {m: 0 for m in range(1, n_machines + 1)}

    # Initialize job completion times
    job_completion_times = {j: 0 for j in jobs}

    # Iterate through jobs and operations
    for job in jobs:
        for operation_index, operation in enumerate(jobs[job]):
            machines, times = operation

            # Find the earliest available machine and time
            best_machine = None
            min_start_time = float('inf')
            processing_time = None

            for i, machine in enumerate(machines):
                available_time = machine_availability[machine]
                start_time = max(available_time, job_completion_times[job])
                if start_time < min_start_time:
                    min_start_time = start_time
                    best_machine = machine
                    processing_time = times[i]

            # Schedule the operation
            start_time = min_start_time
            end_time = start_time + processing_time

            schedule[job].append({
                'Operation': operation_index + 1,
                'Assigned Machine': str(best_machine),
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': processing_time
            })

            # Update machine availability and job completion time
            machine_availability[best_machine] = end_time
            job_completion_times[job] = end_time

    return schedule
