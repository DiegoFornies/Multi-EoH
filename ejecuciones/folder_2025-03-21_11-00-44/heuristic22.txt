
def heuristic(input_data):
    """Combines shortest processing time & earliest available time heuristics with load balancing."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    schedule = {}
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in range(1, n_jobs + 1)}
    machine_load = {m: 0 for m in range(n_machines)}
    operation_queue = []

    for job_id, operations in jobs_data.items():
        operation_queue.append((job_id, 0))

    while operation_queue:
        best_job, best_op_idx, best_machine, best_start_time, best_processing_time = None, None, None, None, float('inf')
        job_to_remove_idx = None

        for idx, (job_id, op_idx) in enumerate(operation_queue):
            possible_machines = jobs_data[job_id][op_idx][0]
            processing_times = jobs_data[job_id][op_idx][1]

            for m_idx, machine in enumerate(possible_machines):
                processing_time = processing_times[m_idx]
                start_time = max(machine_available_time[machine], job_completion_time[job_id])
                end_time = start_time + processing_time
                load_penalty = machine_load[machine] * 0.05

                if end_time + load_penalty < best_processing_time:
                    best_job, best_op_idx, best_machine, best_start_time, best_processing_time = job_id, op_idx, machine, start_time, processing_time
                    job_to_remove_idx = idx

        if best_job is not None:
            job_id = best_job
            op_idx = best_op_idx
            machine = best_machine
            start_time = best_start_time
            processing_time = best_processing_time
            end_time = start_time + processing_time

            if job_id not in schedule:
                schedule[job_id] = []

            schedule[job_id].append({
                'Operation': op_idx + 1,
                'Assigned Machine': machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': processing_time
            })

            machine_available_time[machine] = end_time
            job_completion_time[job_id] = end_time
            machine_load[machine] += processing_time

            del operation_queue[job_to_remove_idx]

            next_op_idx = op_idx + 1
            if next_op_idx < len(jobs_data[job_id]):
                operation_queue.append((job_id, next_op_idx))

    return schedule
