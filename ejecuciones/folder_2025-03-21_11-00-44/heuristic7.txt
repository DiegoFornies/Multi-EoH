
def heuristic(input_data):
    """
    A heuristic algorithm for solving the Flexible Job Shop Scheduling Problem (FJSSP).

    This heuristic prioritizes jobs with more operations and assigns operations to machines
    based on earliest available time, considering both machine availability and job precedence.

    Args:
        input_data (dict): A dictionary containing the problem instance data.

    Returns:
        dict: A dictionary representing the schedule, where each key is a job number and
              the value is a list of dictionaries containing operation details.
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    # Initialize schedule and machine availability
    schedule = {}
    machine_availability = {m: 0 for m in range(n_machines)}

    # Prioritize jobs with more operations
    job_priority = sorted(jobs_data.keys(), key=lambda job: len(jobs_data[job]), reverse=True)

    # Iterate through jobs based on priority
    for job in job_priority:
        ops = jobs_data[job]
        schedule[job] = []
        job_completion_time = 0  # Track completion time of previous operation in the job

        for op_num, (machines, times) in enumerate(ops, 1):
            best_machine, best_start_time, best_processing_time = None, float('inf'), None

            # Find the best machine for the current operation
            for m_idx, machine in enumerate(machines):
                processing_time = times[m_idx]
                start_time = max(machine_availability[machine], job_completion_time)

                if start_time < best_start_time:
                    best_machine, best_start_time, best_processing_time = machine, start_time, processing_time

            # Assign the operation to the selected machine
            start_time = best_start_time
            end_time = start_time + best_processing_time
            schedule[job].append({
                'Operation': op_num,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': best_processing_time
            })

            # Update machine availability and job completion time
            machine_availability[best_machine] = end_time
            job_completion_time = end_time

    return schedule
