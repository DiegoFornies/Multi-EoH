
def heuristic(input_data):
    """
    A heuristic algorithm for the Flexible Job Shop Scheduling Problem (FJSSP).
    This heuristic prioritizes jobs with more operations and machines with less workload,
    aiming to balance makespan, separation between job operations, and machine workload.
    """
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    # Initialize schedule and machine availability times
    schedule = {}
    machine_available_time = {m: 0 for m in range(n_machines)}

    # Calculate job priority based on the number of operations
    job_priority = {job: len(ops) for job, ops in jobs_data.items()}

    # Sort jobs by priority (jobs with more operations first)
    sorted_jobs = sorted(job_priority.items(), key=lambda item: item[1], reverse=True)

    for job, _ in sorted_jobs:
        schedule[job] = []
        job_completion_time = 0  # Completion time of the previous operation in the job

        for op_num, (machines, times) in enumerate(jobs_data[job], 1):
            best_machine = None
            min_end_time = float('inf')

            # Find the machine that results in the earliest completion time for the operation
            for i in range(len(machines)):
                machine = machines[i]
                processing_time = times[i]
                start_time = max(machine_available_time[machine], job_completion_time)
                end_time = start_time + processing_time

                if end_time < min_end_time:
                    min_end_time = end_time
                    best_machine = machine
                    best_processing_time = processing_time  # Keep track of the chosen processing time

            # Schedule the operation on the selected machine
            start_time = max(machine_available_time[best_machine], job_completion_time)
            end_time = start_time + best_processing_time

            schedule[job].append({
                'Operation': op_num,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': best_processing_time
            })

            # Update machine availability and job completion time
            machine_available_time[best_machine] = end_time
            job_completion_time = end_time

    return schedule
