
def heuristic(data):
    """
    Schedules jobs on machines to minimize makespan, reduce time between operations
    in the same job (separation), and balance machine load for the FJSSP problem.

    Args:
        data (dict): A dictionary containing the problem data.
            - 'n_jobs': The number of jobs.
            - 'n_machines': The number of machines.
            - 'jobs': A dictionary representing the jobs and their operations.

    Returns:
        dict: A dictionary representing the schedule. Each key is a job number,
              and the value is a list of dictionaries, each representing an
              operation with its assigned machine, start time, end time, and
              processing time.
    """

    n_jobs = data['n_jobs']
    n_machines = data['n_machines']
    jobs_data = data['jobs']

    # Initialize schedule and machine availability
    schedule = {}
    machine_available_time = {m: 0 for m in range(1, n_machines + 1)}
    job_last_end_time = {j: 0 for j in range(1, n_jobs + 1)} # Track last operation end time for separation

    # Prioritize operations with fewest machine options first, then shortest duration
    operations_list = []
    for job_id, operations in jobs_data.items():
        for op_num, op_details in enumerate(operations):
            operations_list.append((job_id, op_num + 1, op_details))

    operations_list.sort(key=lambda x: (len(x[2][0]), min(x[2][1])))

    for job_id, operation_num, operation_details in operations_list:
        machines = operation_details[0]
        processing_times = operation_details[1]
        
        best_machine = None
        min_end_time = float('inf')

        for i, machine in enumerate(machines):
            machine += 1 #adjust to match machine indexing from 1 instead of 0

            # Consider machine availability + separation constraint
            available_time = max(machine_available_time[machine], job_last_end_time[job_id]) 
            end_time = available_time + processing_times[i]

            if end_time < min_end_time:
                min_end_time = end_time
                best_machine = machine
                best_processing_time = processing_times[i]

        # Schedule the operation on the best machine
        start_time = max(machine_available_time[best_machine], job_last_end_time[job_id])
        end_time = start_time + best_processing_time

        if job_id not in schedule:
            schedule[job_id] = []

        schedule[job_id].append({
            'Operation': operation_num,
            'Assigned Machine': str(best_machine),
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': best_processing_time
        })

        # Update machine availability and last operation end time
        machine_available_time[best_machine] = end_time
        job_last_end_time[job_id] = end_time
        
    return schedule
