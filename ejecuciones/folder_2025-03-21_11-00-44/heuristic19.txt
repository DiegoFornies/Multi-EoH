
def heuristic(data):
    """
    Schedules jobs on machines to minimize makespan, separation, and balance using a heuristic approach.

    Args:
        data (dict): A dictionary containing job and machine information.

    Returns:
        dict: A dictionary representing the schedule, with each job as a key and a list of operation dictionaries as values.
    """
    n_jobs = data['n_jobs']
    n_machines = data['n_machines']
    jobs = data['jobs']

    # Initialize machine availability times
    machine_availability = {m: 0 for m in range(1, n_machines + 1)}
    job_completion_times = {j: 0 for j in range(1, n_jobs + 1)}
    solution = {}

    # Sort jobs by number of operations (shortest job first)
    job_order = sorted(jobs.keys(), key=lambda job_id: len(jobs[job_id]))

    for job_id in job_order:
        solution[job_id] = []
        current_time = 0
        
        for operation_index, operation in enumerate(jobs[job_id]):
            machines, processing_times = operation
            
            # Find the earliest available machine that can perform the operation
            best_machine = None
            min_start_time = float('inf')
            
            for machine_index, machine in enumerate(machines):
                start_time = max(machine_availability[machine], job_completion_times[job_id])
                if start_time < min_start_time:
                    min_start_time = start_time
                    best_machine = machine
                    best_processing_time = processing_times[machine_index]  # Store the processing time for the selected machine
                    
            # Schedule the operation on the selected machine
            start_time = max(machine_availability[best_machine], job_completion_times[job_id])
            end_time = start_time + best_processing_time
            
            solution[job_id].append({
                'Operation': operation_index + 1,
                'Assigned Machine': str(best_machine),
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': best_processing_time
            })
            
            # Update machine availability and job completion time
            machine_availability[best_machine] = end_time
            job_completion_times[job_id] = end_time

    return solution
