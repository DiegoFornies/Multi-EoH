
def heuristic(input_data):
    """
    A heuristic algorithm for solving the Flexible Job Shop Scheduling Problem (FJSP).

    This heuristic prioritizes assigning operations to machines that minimize
    the operation's completion time while also considering machine load balance.

    Args:
        input_data (dict): A dictionary containing the problem data, including:
            - n_jobs (int): The number of jobs.
            - n_machines (int): The number of machines.
            - jobs (dict): A dictionary representing the jobs, where each key is a job number
                         and the value is a list of operations. Each operation is a tuple
                         containing a list of possible machines and their corresponding processing times.

    Returns:
        dict: A dictionary representing the schedule, where each key is a job number and the value
              is a list of dictionaries, each representing an operation with its assigned machine,
              start time, end time, and processing time.
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    # Initialize schedule, machine available times, and job completion times
    schedule = {job: [] for job in range(1, n_jobs + 1)}
    machine_available_time = {machine: 0 for machine in range(n_machines)}
    job_completion_time = {job: 0 for job in range(1, n_jobs + 1)}

    # Create a list of operations to schedule, along with their job and operation number
    operations = []
    for job, operations_list in jobs_data.items():
        for op_num, operation in enumerate(operations_list, 1):
            operations.append((job, op_num, operation))

    # Sort operations based on the shortest processing time across available machines
    operations.sort(key=lambda x: min(x[2][1]))

    # Schedule each operation
    for job, op_num, operation in operations:
        machines, times = operation

        # Find the machine that minimizes the operation's completion time
        best_machine, best_start_time, best_end_time, best_processing_time = None, float('inf'), None, None
        for i, machine in enumerate(machines):
            processing_time = times[i]
            start_time = max(machine_available_time[machine], job_completion_time[job])
            end_time = start_time + processing_time

            if end_time < best_start_time:
                best_machine, best_start_time, best_end_time, best_processing_time = machine, start_time, end_time, processing_time

        # Assign the operation to the best machine
        machine_available_time[best_machine] = best_end_time
        job_completion_time[job] = best_end_time
        schedule[job].append({
            'Operation': op_num,
            'Assigned Machine': best_machine,
            'Start Time': best_start_time,
            'End Time': best_end_time,
            'Processing Time': best_processing_time
        })

    return schedule
