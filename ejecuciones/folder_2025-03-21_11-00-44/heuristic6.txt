
def heuristic(input_data):
    """
    Heuristic for FJSSP scheduling to minimize makespan, reduce time between operations,
    and balance machine load, while respecting operation, machine, and sequence feasibility.
    """
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    # Initialize schedule, machine availability, and job completion times
    schedule = {job: [] for job in range(1, n_jobs + 1)}
    machine_available_time = {machine: 0 for machine in range(n_machines)}
    job_completion_time = {job: 0 for job in range(1, n_jobs + 1)}

    # Sort operations by shortest processing time first, then by least flexible (fewest machine choices)
    operation_queue = []
    for job, operations in jobs.items():
        for op_idx, (machines, times) in enumerate(operations):
            # Calculate average processing time for sorting
            avg_time = sum(times) / len(times)
            operation_queue.append((avg_time, len(machines), job, op_idx, machines, times))

    operation_queue.sort()  # Sort by average processing time, then by flexibility

    # Schedule operations based on the sorted queue
    for avg_time, flexibility, job, op_idx, machines, times in operation_queue:
        best_machine = None
        min_end_time = float('inf')

        # Find the best machine for the operation (earliest completion time)
        for machine_idx, machine in enumerate(machines):
            processing_time = times[machine_idx]
            start_time = max(machine_available_time[machine], job_completion_time[job])
            end_time = start_time + processing_time

            if end_time < min_end_time:
                min_end_time = end_time
                best_machine = machine
                best_start_time = start_time
                best_processing_time = processing_time

        # Schedule the operation on the best machine
        schedule[job].append({
            'Operation': op_idx + 1,
            'Assigned Machine': best_machine,
            'Start Time': best_start_time,
            'End Time': min_end_time,
            'Processing Time': best_processing_time
        })

        # Update machine availability and job completion time
        machine_available_time[best_machine] = min_end_time
        job_completion_time[job] = min_end_time

    return schedule
