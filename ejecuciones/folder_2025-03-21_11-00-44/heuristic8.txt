
def heuristic(input_data):
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    # Initialize machine availability times
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in jobs}

    # Initialize the schedule
    schedule = {j: [] for j in jobs}

    # Create a list of operations to schedule, sorted by the shortest processing time first.
    operations = []
    for job, ops in jobs.items():
        for op_idx, (machines, times) in enumerate(ops):
            min_time_idx = times.index(min(times))
            operations.append((job, op_idx + 1, machines, times, min(times), machines[min_time_idx]))  # Store job, op number, possible machines, times, min time
            # operation = (job number, index, min processing time, machine related to the processing time)
    operations.sort(key=lambda x: x[4]) # Sort by the minimum processing time.

    # Iterate through operations to schedule them
    for job, op_idx, machines, times, min_time, assigned_machine in operations:

        # Find the earliest possible start time on the assigned machine
        start_time = max(machine_available_time[assigned_machine], job_completion_time[job])

        # Schedule the operation
        processing_time = times[machines.index(assigned_machine)]
        end_time = start_time + processing_time

        schedule[job].append({
            'Operation': op_idx,
            'Assigned Machine': assigned_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': processing_time
        })

        # Update machine and job completion times
        machine_available_time[assigned_machine] = end_time
        job_completion_time[job] = end_time

    return schedule
