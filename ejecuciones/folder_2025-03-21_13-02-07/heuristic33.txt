
def heuristic(input_data):
    """Schedules jobs minimizing makespan and balancing machine load."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    schedule = {job: [] for job in range(1, n_jobs + 1)}
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in range(1, n_jobs + 1)}

    operations = []
    for job_id, job_ops in jobs.items():
        for op_index, op_data in enumerate(job_ops, 1):
            operations.append((job_id, op_index, op_data[0], op_data[1]))

    operations.sort(key=lambda x: job_completion_time[x[0]])

    for job_id, op_index, possible_machines, possible_times in operations:
        best_machine = None
        min_end_time = float('inf')
        
        for machine_index, machine_id in enumerate(possible_machines):
            processing_time = possible_times[machine_index]
            start_time = max(machine_available_time[machine_id], job_completion_time[job_id])
            end_time = start_time + processing_time
            
            if end_time < min_end_time:
                min_end_time = end_time
                best_machine = machine_id
                best_start_time = start_time
                best_processing_time = processing_time

        schedule[job_id].append({
            'Operation': op_index,
            'Assigned Machine': best_machine,
            'Start Time': best_start_time,
            'End Time': best_start_time + best_processing_time,
            'Processing Time': best_processing_time
        })

        machine_available_time[best_machine] = best_start_time + best_processing_time
        job_completion_time[job_id] = best_start_time + best_processing_time

    return schedule
