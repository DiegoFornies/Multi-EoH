
def heuristic(input_data):
    """Schedules jobs to minimize makespan using a greedy approach."""

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']
    schedule = {}
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in range(1, n_jobs + 1)}
    scheduled_operations = set()
    operations = []

    for job_id, job_ops in jobs_data.items():
        for op_idx, op_data in enumerate(job_ops):
            operations.append((job_id, op_idx + 1, op_data))

    while len(scheduled_operations) < len(operations):
        available_operations = []
        for job_id, op_idx, op_data in operations:
            if (job_id, op_idx) not in scheduled_operations:
                if op_idx == 1 or (job_id, op_idx - 1) in scheduled_operations:
                    available_operations.append((job_id, op_idx, op_data))

        if not available_operations:
            return "No solution found"

        best_operation = None
        min_end_time = float('inf')

        for job_id, op_idx, op_data in available_operations:
            machines, times = op_data
            best_machine = None
            best_time = float('inf')
            best_processing_time = None

            for machine_idx, machine in enumerate(machines):
                processing_time = times[machine_idx]
                start_time = max(machine_available_time[machine], job_completion_time[job_id])
                end_time = start_time + processing_time

                if end_time < best_time:
                    best_time = end_time
                    best_machine = machine
                    best_processing_time = processing_time

            if best_time < min_end_time:
                min_end_time = best_time
                best_operation = (job_id, op_idx, best_machine, best_time - best_processing_time, best_time, best_processing_time)

        job_id, op_idx, assigned_machine, start_time, end_time, processing_time = best_operation

        if job_id not in schedule:
            schedule[job_id] = []

        schedule[job_id].append({
            'Operation': op_idx,
            'Assigned Machine': assigned_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': processing_time
        })

        machine_available_time[assigned_machine] = end_time
        job_completion_time[job_id] = end_time
        scheduled_operations.add((job_id, op_idx))

    return schedule
