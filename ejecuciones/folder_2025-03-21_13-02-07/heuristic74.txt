
def heuristic(data):
    """
    A heuristic for the Flexible Job Shop Scheduling Problem (FJSP).

    Args:
        data (dict): A dictionary containing the problem data, including the number of jobs,
                     number of machines, and job operation details.

    Returns:
        dict: A dictionary representing the solution, with each key being a job number
              and the value being a list of dictionaries, each representing an operation
              with assigned machine, start time, end time, and processing time.
    """

    n_jobs = data['n_jobs']
    n_machines = data['n_machines']
    jobs = data['jobs']

    solution = {}
    machine_availability = [0] * (n_machines + 1)  # Initialize machine availability times
    job_completion_times = [0] * (n_jobs + 1)  # Track completion times for each job to maintain sequence

    for job_id in jobs:
        solution[job_id] = []
        job = jobs[job_id]
        current_time = 0

        for operation_index, operation in enumerate(job):
            machines = operation[0]
            processing_times = operation[1]

            # Find the earliest available machine among the possible machines
            best_machine = None
            min_end_time = float('inf')
            best_processing_time = None

            for i, machine in enumerate(machines):
                processing_time = processing_times[i]
                available_time = max(machine_availability[machine], job_completion_times[job_id])  # Account for both machine and job sequence

                if available_time + processing_time < min_end_time:
                    min_end_time = available_time + processing_time
                    best_machine = str(machine)  # Store machine number as string
                    best_processing_time = processing_time
                    start_time = available_time


            # Assign the operation to the best machine and update times
            assigned_machine = int(best_machine)
            start_time = max(machine_availability[assigned_machine], job_completion_times[job_id])
            end_time = start_time + best_processing_time

            machine_availability[assigned_machine] = end_time
            job_completion_times[job_id] = end_time


            solution[job_id].append({
                'Operation': operation_index + 1,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': best_processing_time
            })

    return solution
