
def heuristic(input_data):
    """Combines earliest start & machine load balancing."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']
    machine_available = {m: 0 for m in range(n_machines)}
    job_completion = {j: 0 for j in jobs}
    schedule = {j: [] for j in jobs}
    operations = []

    for job, ops in jobs.items():
        for i, (machines, times) in enumerate(ops):
            operations.append((job, i + 1, machines, times))

    def start_time(job, machine, time_index):
        return max(machine_available[machine], job_completion[job])

    while operations:
        best_op = None
        best_machine = None
        min_start = float('inf')
        best_time_index = None

        for job, op_num, machines, times in operations:
            preceding_done = True
            for prev_op in range(1, op_num):
                found = False
                for sch_op in schedule[job]:
                    if sch_op['Operation'] == prev_op:
                        found = True
                        break
                if not found:
                    preceding_done = False
                    break
            if not preceding_done:
                continue

            for m_idx, machine in enumerate(machines):
                start = start_time(job, machine, m_idx)
                if start < min_start:
                    min_start = start
                    best_op = (job, op_num, machines, times)
                    best_machine = machine
                    best_time_index = m_idx
                elif start == min_start and machine_available[machine] < (machine_available[best_machine] if best_machine is not None else float('inf')):
                    best_op = (job, op_num, machines, times)
                    best_machine = machine
                    best_time_index = m_idx
        if best_op:
            job, op_num, machines, times = best_op
            proc_time = times[best_time_index]
            start = start_time(job, best_machine, best_time_index)
            end = start + proc_time

            schedule[job].append({
                'Operation': op_num,
                'Assigned Machine': best_machine,
                'Start Time': start,
                'End Time': end,
                'Processing Time': proc_time
            })

            machine_available[best_machine] = end
            job_completion[job] = end
            operations.remove(best_op)
        else:
            break
    return schedule
