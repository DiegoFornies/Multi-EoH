
def heuristic(input_data):
    """
    A heuristic algorithm for the Flexible Job Shop Scheduling Problem (FJSP) that considers
    makespan, separation between operations of the same job, and machine load balancing.
    It uses a greedy approach with a priority rule to select machines and schedule operations.

    Args:
        input_data (dict): A dictionary containing the problem data, including the number of jobs,
                           the number of machines, and the details of each job's operations.

    Returns:
        dict: A dictionary representing the schedule, where each key is a job number and the value
              is a list of dictionaries, each representing an operation with its assigned machine,
              start time, end time, and processing time.
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    # Initialize schedule and machine available times
    schedule = {}
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_last_end_time = {j: 0 for j in range(1, n_jobs + 1)}  # Tracks completion time of last operation of each job

    # Create a list of operations, each represented as a tuple:
    # (job_id, operation_index, possible_machines, possible_times)
    operations = []
    for job_id, job_ops in jobs.items():
        for op_index, op_data in enumerate(job_ops, 1):
            operations.append((job_id, op_index, op_data[0], op_data[1]))

    # Sort operations based on the earliest possible start time (makespan consideration)
    # This requires estimating the earliest start time for each operation.
    def calculate_earliest_start(operation):
        job_id, _, _, _ = operation
        return job_last_end_time[job_id]  # Earliest start time is after previous operation of the job

    operations.sort(key=calculate_earliest_start)

    # Iterate through operations and schedule them
    for job_id, op_index, possible_machines, possible_times in operations:
        best_machine = None
        best_start_time = float('inf')
        best_processing_time = None

        # Find the best machine for the current operation
        for machine_index, machine_id in enumerate(possible_machines):
            processing_time = possible_times[machine_index]
            start_time = max(machine_available_time[machine_id], job_last_end_time[job_id])

            # Heuristic: Prefer machines that minimize makespan and promote load balancing
            # Prioritize machines that become available sooner and are less loaded

            if start_time < best_start_time:
                best_machine = machine_id
                best_start_time = start_time
                best_processing_time = processing_time
            elif start_time == best_start_time and machine_available_time[machine_id] < machine_available_time[best_machine if best_machine is not None else 0]:
                best_machine = machine_id
                best_processing_time = processing_time

        # Schedule the operation on the best machine
        start_time = best_start_time
        end_time = start_time + best_processing_time

        if job_id not in schedule:
            schedule[job_id] = []

        schedule[job_id].append({
            'Operation': op_index,
            'Assigned Machine': best_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': best_processing_time
        })

        # Update machine available time and job completion time
        machine_available_time[best_machine] = end_time
        job_last_end_time[job_id] = end_time

    return schedule
