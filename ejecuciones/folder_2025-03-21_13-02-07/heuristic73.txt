
def heuristic(input_data):
    """Schedules jobs minimizing makespan and machine idle time."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']
    machine_available = {m: 0 for m in range(n_machines)}
    job_completion = {j: 0 for j in range(1, n_jobs + 1)}
    schedule = {j: [] for j in range(1, n_jobs + 1)}

    # Schedule operations
    for job_id in range(1, n_jobs + 1):
        operations = jobs[job_id]
        for operation_index, operation in enumerate(operations, 1):
            possible_machines = operation[0]
            possible_times = operation[1]
            # Find the best machine based on earliest availability
            best_machine = None
            min_available_time = float('inf')
            best_processing_time = float('inf')
            best_index = None

            for i, machine in enumerate(possible_machines):
                processing_time = possible_times[i]
                available_time = machine_available[machine]
                if available_time < min_available_time or \
                   (available_time == min_available_time and processing_time < best_processing_time):
                    min_available_time = available_time
                    best_machine = machine
                    best_processing_time = processing_time
                    best_index = i

            # Schedule the operation
            start_time = max(machine_available[best_machine], job_completion[job_id])
            end_time = start_time + best_processing_time

            schedule[job_id].append({
                'Operation': operation_index,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': best_processing_time
            })

            # Update times
            machine_available[best_machine] = end_time
            job_completion[job_id] = end_time

    return schedule
