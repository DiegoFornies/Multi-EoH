
def heuristic(input_data):
    """Schedules jobs minimizing makespan and balancing machine load."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']
    machine_availability = {m: 0 for m in range(n_machines)}
    job_completion_times = {j: 0 for j in range(1, n_jobs + 1)}
    schedule = {j: [] for j in range(1, n_jobs + 1)}
    operations = []

    for job_id, job_ops in jobs.items():
        for op_index, op_data in enumerate(job_ops, 1):
            operations.append({
                'job': job_id,
                'operation': op_index,
                'machines': op_data[0],
                'times': op_data[1],
                'num_machines': len(op_data[0])
            })

    # Prioritize operations with fewer machine choices and shorter processing times
    operations.sort(key=lambda op: (op['num_machines'], sum(op['times']) / len(op['times'])))

    while operations:
        best_op = None
        best_machine = None
        earliest_start = float('inf')
        best_time_index = None

        for op in operations:
            job_id = op['job']
            op_index = op['operation']
            possible_machines = op['machines']
            possible_times = op['times']

            # Check if preceding operations are scheduled
            preceding_ops_scheduled = True
            for prev_op_idx in range(1, op_index):
                scheduled = False
                for scheduled_op in schedule[job_id]:
                    if scheduled_op['Operation'] == prev_op_idx:
                        scheduled = True
                        break
                if not scheduled:
                    preceding_ops_scheduled = False
                    break

            if preceding_ops_scheduled:
                for m_index, machine_id in enumerate(possible_machines):
                    #Earliest possible start time, considering machine and job availability
                    start_time = max(machine_availability[machine_id], job_completion_times[job_id])
                    
                    #If start_time is the earliest, we choose the job
                    if start_time < earliest_start:
                        earliest_start = start_time
                        best_op = op
                        best_machine = machine_id
                        best_time_index = m_index

        if best_op is not None:
            job_id = best_op['job']
            op_index = best_op['operation']
            best_machine = best_machine
            processing_time = best_op['times'][best_time_index]

            start_time = earliest_start
            end_time = start_time + processing_time

            schedule[job_id].append({
                'Operation': op_index,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': processing_time
            })

            machine_availability[best_machine] = end_time
            job_completion_times[job_id] = end_time
            operations.remove(best_op)
        else:
            break

    return schedule
