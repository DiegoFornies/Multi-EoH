
def heuristic(input_data):
    """Schedules jobs to minimize makespan and balance load."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    schedule = {}
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in range(1, n_jobs + 1)}

    # Prioritize operations based on job completion time
    operations = []
    for job_id in range(1, n_jobs + 1):
        for op_index, operation in enumerate(jobs[job_id], 1):
            operations.append((job_id, op_index, operation[0], operation[1]))

    def calculate_priority(operation):
        job_id, _, _, _ = operation
        return job_completion_time[job_id]

    operations.sort(key=calculate_priority)

    for job_id, op_index, possible_machines, possible_times in operations:
        # Find the machine with the earliest available time and shortest processing time
        best_machine = None
        min_available_time = float('inf')
        best_processing_time = float('inf')
            
        for i in range(len(possible_machines)):
            machine = possible_machines[i]
            processing_time = possible_times[i]
            available_time = max(machine_available_time[machine], job_completion_time[job_id])  # Ensure sequence feasibility

            if available_time < min_available_time or (available_time == min_available_time and processing_time < best_processing_time):
                min_available_time = available_time
                best_machine = machine
                best_processing_time = processing_time
                best_index = i
                start_time = available_time # save start time when the best available time updated

        # Schedule the operation on the best machine
        start_time = max(machine_available_time[best_machine], job_completion_time[job_id])

        end_time = start_time + best_processing_time

        if job_id not in schedule:
            schedule[job_id] = []

        schedule[job_id].append({
            'Operation': op_index,
            'Assigned Machine': best_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': best_processing_time
        })

        # Update machine and job completion times
        machine_available_time[best_machine] = end_time
        job_completion_time[job_id] = end_time

    return schedule
