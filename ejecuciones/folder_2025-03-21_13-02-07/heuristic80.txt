
def heuristic(input_data):
    """Combines operation/machine prioritization & earliest start time."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    machine_available = {m: 0 for m in range(n_machines)}
    job_completion = {j: 0 for j in jobs}
    schedule = {j: [] for j in jobs}

    operations = []
    for job, ops in jobs.items():
        for i, (machines, times) in enumerate(ops):
            operations.append({
                'job': job,
                'operation': i + 1,
                'machines': machines,
                'times': times,
                'num_machines': len(machines),
                'avg_time': sum(times) / len(times)
            })

    operations.sort(key=lambda op: (op['num_machines'], op['avg_time']))

    while operations:
        best_op = None
        best_machine = None
        min_start = float('inf')
        best_time_index = None

        for op in operations:
            job = op['job']
            op_num = op['operation']
            machines = op['machines']
            times = op['times']

            preceding_done = True
            for prev_op in range(1, op_num):
                found = False
                for sch_op in schedule[job]:
                    if sch_op['Operation'] == prev_op:
                        found = True
                        break
                if not found:
                    preceding_done = False
                    break
            if not preceding_done:
                continue

            for m_idx, machine in enumerate(machines):
                start = max(machine_available[machine], job_completion[job])
                if start < min_start:
                    min_start = start
                    best_op = op
                    best_machine = machine
                    best_time_index = m_idx

        if best_op:
            job = best_op['job']
            op_num = best_op['operation']
            machines = best_op['machines']
            times = best_op['times']
            proc_time = times[best_time_index]
            best_machine=best_machine
            start = max(machine_available[best_machine], job_completion[job])
            end = start + proc_time

            schedule[job].append({
                'Operation': op_num,
                'Assigned Machine': best_machine,
                'Start Time': start,
                'End Time': end,
                'Processing Time': proc_time
            })

            machine_available[best_machine] = end
            job_completion[job] = end
            operations.remove(best_op)
        else:
            break

    return schedule
