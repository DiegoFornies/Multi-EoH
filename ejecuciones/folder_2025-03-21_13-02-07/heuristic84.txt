
def heuristic(input_data):
    """Combines earliest start time and machine load balancing."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']
    schedule = {j: [] for j in range(1, n_jobs + 1)}
    machine_available = {m: 0 for m in range(n_machines)}
    job_completion = {j: 0 for j in range(1, n_jobs + 1)}
    operations = []

    for j_id, job in jobs.items():
        for idx, op in enumerate(job, 1):
            operations.append((j_id, idx, op[0], op[1]))

    def calculate_priority(op):
        j_id, op_idx, machines, times = op
        earliest_start_time = float('inf')
        for m_idx, m in enumerate(machines):
            start_time = max(machine_available[m], job_completion[j_id])
            earliest_start_time = min(earliest_start_time, start_time)
        return earliest_start_time

    operations.sort(key=calculate_priority)

    for j_id, op_idx, machines, times in operations:
        best_machine = None
        min_end = float('inf')
        best_time = None

        for m_idx, m in enumerate(machines):
            time = times[m_idx]
            start = max(machine_available[m], job_completion[j_id])
            end = start + time
            if end < min_end:
                min_end = end
                best_machine = m
                best_time = time
            elif end == min_end and machine_available[m] < (machine_available[best_machine] if best_machine is not None else float('inf')):
                best_machine = m
                best_time = time

        start = max(machine_available[best_machine], job_completion[j_id])
        end = start + best_time

        schedule[j_id].append({
            'Operation': op_idx,
            'Assigned Machine': best_machine,
            'Start Time': start,
            'End Time': end,
            'Processing Time': best_time
        })

        machine_available[best_machine] = end
        job_completion[j_id] = end

    return schedule
