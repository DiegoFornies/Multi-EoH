
import random

def heuristic(data):
    """
    A heuristic to solve the Flexible Job Shop Scheduling Problem (FJSSP).

    Args:
        data (dict): A dictionary containing the problem data.

    Returns:
        dict: A dictionary representing the solution.
    """

    n_jobs = data['n_jobs']
    n_machines = data['n_machines']
    jobs = data['jobs']

    solution = {}
    machine_available_times = {m: 0 for m in range(1, n_machines + 1)}
    job_completion_times = {j: 0 for j in range(1, n_jobs + 1)}

    for job_id in range(1, n_jobs + 1):
        solution[job_id] = []
        operations = jobs[job_id]
        current_time = 0  # Initialize current time for the job

        for op_num, operation in enumerate(operations):
            machines, processing_times = operation
            best_machine = None
            min_end_time = float('inf')
            best_processing_time = None

            for i, machine in enumerate(machines):
                processing_time = processing_times[i]
                available_time = max(machine_available_times[machine], job_completion_times[job_id])
                end_time = available_time + processing_time

                if end_time < min_end_time:
                    min_end_time = end_time
                    best_machine = machine
                    best_processing_time = processing_time

            if best_machine is None:
                # If no suitable machine is found (shouldn't happen with correct data), assign randomly
                best_machine = random.choice(machines)
                best_processing_time = processing_times[machines.index(best_machine)]


            available_time = max(machine_available_times[best_machine], job_completion_times[job_id])

            start_time = available_time
            end_time = start_time + best_processing_time


            solution[job_id].append({
                'Operation': op_num + 1,
                'Assigned Machine': str(best_machine),
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': best_processing_time
            })
            machine_available_times[best_machine] = end_time
            job_completion_times[job_id] = end_time

    return solution
