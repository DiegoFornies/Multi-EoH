
def heuristic(input_data):
    """Hybrid heuristic: Combines machine availability & operation priority."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    schedule = {job: [] for job in range(1, n_jobs + 1)}
    machine_available_time = {machine: 0 for machine in range(n_machines)}
    job_completion_time = {job: 0 for job in range(1, n_jobs + 1)}

    operations = []
    for job, operations_data in jobs_data.items():
        for operation_index, operation in enumerate(operations_data):
            operations.append({
                'job': job,
                'operation': operation_index + 1,
                'machines': operation[0],
                'times': operation[1],
            })

    # Prioritize operations with fewer machine choices AND earlier job completion times
    operations.sort(key=lambda op: (len(op['machines']), job_completion_time[op['job']]))

    while operations:
        best_op = None
        best_machine = None
        earliest_start = float('inf')
        best_processing_time = float('inf')

        for op in operations:
            job = op['job']
            operation_number = op['operation']
            
            # Check if preceding operations are scheduled
            preceding_ops_scheduled = True
            for prev_op_idx in range(1, operation_number):
                scheduled = False
                for scheduled_op in schedule[job]:
                    if scheduled_op['Operation'] == prev_op_idx:
                        scheduled = True
                        break
                if not scheduled:
                    preceding_ops_scheduled = False
                    break

            if preceding_ops_scheduled:
                for i, machine in enumerate(op['machines']):
                    processing_time = op['times'][i]
                    start_time = max(machine_available_time[machine], job_completion_time[job])

                    if start_time < earliest_start or \
                       (start_time == earliest_start and processing_time < best_processing_time):
                        earliest_start = start_time
                        best_op = op
                        best_machine = machine
                        best_processing_time = processing_time
                        best_index = i

        if best_op is not None:
            job = best_op['job']
            op_num = best_op['operation']
            processing_time = best_op['times'][best_index]
            start_time = max(machine_available_time[best_machine], job_completion_time[job])
            end_time = start_time + processing_time

            schedule[job].append({
                'Operation': op_num,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': processing_time
            })

            machine_available_time[best_machine] = end_time
            job_completion_time[job] = end_time
            operations.remove(best_op)
        else:
            #If NO best_op after loop, means that there are cyclical operation-dependencies
            #Break and return best schedule we have
            break

    return schedule
