
def heuristic(input_data):
    """Schedules jobs minimizing makespan and balancing machine load."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    machine_availability = {m: 0 for m in range(n_machines)}
    job_completion_times = {j: 0 for j in range(1, n_jobs + 1)}
    schedule = {}
    operations = []

    for job_id, job_ops in jobs.items():
        for op_index, op_data in enumerate(job_ops, 1):
            operations.append({
                'job': job_id,
                'operation': op_index,
                'machines': op_data[0],
                'times': op_data[1],
                'num_machines': len(op_data[0])
            })

    # Sort operations by number of available machines, then processing time
    operations.sort(key=lambda op: (op['num_machines'], sum(op['times']) / len(op['times'])))

    for op in operations:
        job_id = op['job']
        op_index = op['operation']
        possible_machines = op['machines']
        possible_times = op['times']

        best_machine, best_time, earliest_start, processing_time = None, float('inf'), float('inf'), None

        for m_index, machine_id in enumerate(possible_machines):
            t = possible_times[m_index]
            start_time = max(machine_availability[machine_id], job_completion_times[job_id])
            completion_time = start_time + t

            if completion_time < best_time:
                best_time = completion_time
                best_machine = machine_id
                earliest_start = start_time
                processing_time = t
            elif completion_time == best_time and machine_availability[machine_id] < machine_availability[best_machine if best_machine is not None else 0]:
                best_machine = machine_id
                earliest_start = start_time
                processing_time = t
                best_time = completion_time

        start_time = earliest_start
        end_time = start_time + processing_time

        if job_id not in schedule:
            schedule[job_id] = []

        schedule[job_id].append({
            'Operation': op_index,
            'Assigned Machine': best_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': processing_time
        })

        machine_availability[best_machine] = end_time
        job_completion_times[job_id] = end_time

    return schedule
