
def heuristic(input_data):
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    machine_available_times = {m: 0 for m in range(n_machines)}
    job_completion_times = {j: 0 for j in range(1, n_jobs + 1)}
    schedule = {}

    def calculate_makespan(solution):
        makespan = 0
        for job_schedule in solution.values():
            if job_schedule:
                makespan = max(makespan, job_schedule[-1]['End Time'])
        return makespan

    import heapq

    # Priority Queue for operations based on Shortest Processing Time First (SPT)
    operation_queue = []
    job_pointers = {job: 0 for job in jobs}  # Track current operation for each job

    # Initialize queue with first operation from each job
    for job in jobs:
        machines, times = jobs[job][0]
        min_time = min(times)
        heapq.heappush(operation_queue, (min_time, job, 0))  # (processing_time, job, operation_index)

    while operation_queue:
        processing_time, job, operation_index = heapq.heappop(operation_queue)
        machines, times = jobs[job][operation_index]
        
        # Find the machine that makes the operation finish the earliest
        best_machine = None
        earliest_finish_time = float('inf')

        for i, machine in enumerate(machines):
            start_time = max(machine_available_times[machine], job_completion_times[job])
            finish_time = start_time + times[i]
            if finish_time < earliest_finish_time:
                earliest_finish_time = finish_time
                best_machine = machine
                best_processing_time = times[i]

        start_time = max(machine_available_times[best_machine], job_completion_times[job])
        end_time = start_time + best_processing_time

        if job not in schedule:
            schedule[job] = []

        schedule[job].append({
            'Operation': operation_index + 1,
            'Assigned Machine': best_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': best_processing_time
        })

        machine_available_times[best_machine] = end_time
        job_completion_times[job] = end_time

        # Add next operation of the job to the queue, if any
        if operation_index + 1 < len(jobs[job]):
            next_machines, next_times = jobs[job][operation_index + 1]
            min_next_time = min(next_times)
            heapq.heappush(operation_queue, (min_next_time, job, operation_index + 1))

    return schedule
