
def heuristic(input_data):
    """Combines machine availability and job priority for FJSSP."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    machine_availability = {m: 0 for m in range(n_machines)}
    job_completion_times = {job: 0 for job in range(1, n_jobs + 1)}
    schedule = {}

    job_priority = sorted(jobs_data.keys(),
                         key=lambda job: sum(len(machines) for machines, _ in jobs_data[job]) / len(jobs_data[job]))

    for job in job_priority:
        schedule[job] = []
        current_time = 0

        for op_index, (machines, times) in enumerate(jobs_data[job]):
            best_machine, best_time = None, float('inf')
            earliest_start = float('inf')

            for m, t in zip(machines, times):
                start_time = max(machine_availability[m], job_completion_times[job])
                completion_time = start_time + t

                if completion_time < best_time:
                    best_time = completion_time
                    best_machine = m
                    earliest_start = start_time

            processing_time = times[machines.index(best_machine)]
            start_time = max(machine_availability[best_machine], job_completion_times[job])
            end_time = start_time + processing_time

            schedule[job].append({
                'Operation': op_index + 1,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': processing_time
            })

            machine_availability[best_machine] = end_time
            job_completion_times[job] = end_time
            current_time = end_time

    return schedule
