
def heuristic(input_data):
    """
    A heuristic for the Flexible Job Shop Scheduling Problem (FJSP) that aims to minimize makespan,
    reduce time between operations in the same job, and balance machine load.

    The heuristic uses a greedy approach, prioritizing operations based on shortest processing time and
    least loaded machine. It also considers job dependencies to maintain operation sequence.

    Args:
        input_data (dict): A dictionary containing the FJSP problem definition.

    Returns:
        dict: A dictionary representing the schedule, where each key is a job number and the value is
              a list of dictionaries, each representing an operation with assigned machine, start time,
              end time, and processing time.
    """
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    # Initialize data structures
    schedule = {}
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_current_operation = {j: 0 for j in jobs}  # Track the next operation to schedule for each job
    job_start_time = {j: 0 for j in jobs}
    
    # Helper function to find the best machine for an operation
    def find_best_machine(job_id, operation_index):
        machines, times = jobs[job_id][operation_index]
        
        best_machine, best_time = None, float('inf')
        earliest_start = float('inf')
        
        for i in range(len(machines)):
            machine = machines[i]
            processing_time = times[i]
            
            start_time = max(machine_available_time[machine], job_start_time[job_id])
            
            if processing_time < best_time or (processing_time == best_time and start_time < earliest_start):
                best_machine, best_time = machine, processing_time
                earliest_start = start_time
        
        return best_machine, best_time, earliest_start

    # Schedule operations greedily
    scheduled_operations = 0
    total_operations = sum(len(ops) for ops in jobs.values())

    while scheduled_operations < total_operations:
        # Find eligible operations (operations that can be scheduled)
        eligible_operations = []
        for job_id in jobs:
            operation_index = job_current_operation[job_id]
            if operation_index < len(jobs[job_id]):
                eligible_operations.append((job_id, operation_index))

        # If there are no operations, it can only mean that every operation has been performed, it's a bug
        if not eligible_operations:
            break

        # Find the best operation among the eligible ones based on SPT and least loaded machine
        best_job, best_operation_index = None, None
        min_end_time = float('inf')

        for job_id, operation_index in eligible_operations:
            machine, time, start_time = find_best_machine(job_id, operation_index)
            end_time = start_time + time
            
            if end_time < min_end_time:
                best_job, best_operation_index = job_id, operation_index
                min_end_time = end_time
                best_machine = machine
                best_time = time
                best_start_time = start_time

        # Schedule the best operation
        job_id = best_job
        operation_index = best_operation_index
        
        machine = best_machine
        processing_time = best_time
        start_time = best_start_time

        end_time = start_time + processing_time
        
        if job_id not in schedule:
            schedule[job_id] = []

        schedule[job_id].append({
            'Operation': operation_index + 1,
            'Assigned Machine': machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': processing_time
        })

        # Update data structures
        machine_available_time[machine] = end_time
        job_start_time[job_id] = end_time
        job_current_operation[job_id] += 1
        scheduled_operations += 1

    return schedule
