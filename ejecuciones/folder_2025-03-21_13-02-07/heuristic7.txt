
def heuristic(input_data):
    """
    A heuristic algorithm for solving the Flexible Job Shop Scheduling Problem (FJSSP).
    This heuristic prioritizes operations based on a combination of factors,
    including processing time and the number of alternative machines.  It aims to
    minimize makespan and balance machine load.

    Args:
        input_data (dict): A dictionary containing the problem instance data.

    Returns:
        dict: A dictionary representing the schedule, where keys are job numbers
              and values are lists of operation dictionaries.
    """

    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs = input_data['jobs']

    # Initialize data structures
    machine_available_time = {m: 0 for m in range(n_machines)}
    job_completion_time = {j: 0 for j in jobs}
    schedule = {j: [] for j in jobs}
    scheduled_operations = set()

    # Create a list of all operations with their attributes
    operations = []
    for job, operations_list in jobs.items():
        for op_idx, (machines, times) in enumerate(operations_list):
            operations.append({
                'job': job,
                'operation': op_idx + 1,
                'machines': machines,
                'times': times,
                'num_machines': len(machines)
            })

    # Sort operations based on a priority score. The priority score gives more importance
    # to operations with a few alternative machines and short processing times.
    # This is a multi-criteria decision making approach.
    operations.sort(key=lambda op: (op['num_machines'], sum(op['times']) / len(op['times'])))
    
    while operations:
        best_op = None
        best_machine = None
        earliest_start = float('inf')
        
        for op in operations:
          job = op['job']
          
          if all(prev_op['Operation'] < op['operation'] for prev_op in schedule[job]):
            
            for m_idx, machine in enumerate(op['machines']):
              
              start_time = max(machine_available_time[machine], job_completion_time[job])
              
              if start_time < earliest_start:
                earliest_start = start_time
                best_op = op
                best_machine = machine
                best_time_index = m_idx

        if best_op is not None:
            job = best_op['job']
            op_num = best_op['operation']
            processing_time = best_op['times'][best_time_index]

            start_time = max(machine_available_time[best_machine], job_completion_time[job])
            end_time = start_time + processing_time
            

            schedule[job].append({
                'Operation': op_num,
                'Assigned Machine': best_machine,
                'Start Time': start_time,
                'End Time': end_time,
                'Processing Time': processing_time
            })

            machine_available_time[best_machine] = end_time
            job_completion_time[job] = end_time
            operations.remove(best_op)
        else:
          break #No operations can be scheduled due to dependencies

    return schedule
