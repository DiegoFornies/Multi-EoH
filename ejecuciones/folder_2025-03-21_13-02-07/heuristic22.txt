
def heuristic(input_data):
    """A hybrid heuristic for FJSSP minimizing makespan and balancing load."""
    n_jobs = input_data['n_jobs']
    n_machines = input_data['n_machines']
    jobs_data = input_data['jobs']

    machine_availability = {m: 0 for m in range(n_machines)}
    job_completion_times = {job: 0 for job in range(1, n_jobs + 1)}
    schedule = {}

    job_priority = sorted(jobs_data.keys(),
                         key=lambda job: sum(len(machines) for machines, _ in jobs_data[job]) / len(jobs_data[job]))

    operations = []
    for job_id, job_ops in jobs_data.items():
        for op_index, op_data in enumerate(job_ops, 1):
            operations.append((job_id, op_index, op_data[0], op_data[1]))

    def calculate_earliest_start(operation):
        job_id, _, _, _ = operation
        return job_completion_times[job_id]

    operations.sort(key=calculate_earliest_start)

    for job_id, op_index, possible_machines, possible_times in operations:
        best_machine = None
        best_start_time = float('inf')
        best_processing_time = None

        for machine_index, machine_id in enumerate(possible_machines):
            processing_time = possible_times[machine_index]
            start_time = max(machine_availability[machine_id], job_completion_times[job_id])

            if start_time < best_start_time:
                best_machine = machine_id
                best_start_time = start_time
                best_processing_time = processing_time
            elif start_time == best_start_time and machine_availability[machine_id] < machine_availability[best_machine if best_machine is not None else 0]:
                best_machine = machine_id
                best_processing_time = processing_time

        start_time = best_start_time
        end_time = start_time + best_processing_time

        if job_id not in schedule:
            schedule[job_id] = []

        schedule[job_id].append({
            'Operation': op_index,
            'Assigned Machine': best_machine,
            'Start Time': start_time,
            'End Time': end_time,
            'Processing Time': best_processing_time
        })

        machine_availability[best_machine] = end_time
        job_completion_times[job_id] = end_time

    return schedule
