This heuristic randomly assigns machines to jobs from the available options, considering both machine availability and job constraints. For each operation, it calculates the start and end times, updates the machine and job times, and generates a schedule. This approach aims to provide a simple, non-optimal solution for job scheduling.
```python
import random
def heuristic(input_data):
    schedule, machine_time = {}, {m: 0 for m in range(input_data['n_machines'])}
    
    for job, ops in input_data['jobs'].items():
        schedule[job], job_time = [], 0
        
        for op, (machines, times) in enumerate(ops, 1):
            m, t = machines[0], times[0]  # Tomar la primera opci√≥n disponible
            start, end = max(machine_time[m], job_time), max(machine_time[m], job_time) + t
            schedule[job].append({'Operation': op, 'Assigned Machine': m, 'Start Time': start, 'End Time': end, 'Processing Time': t})
            machine_time[m], job_time = end, end
    
    return schedule
```